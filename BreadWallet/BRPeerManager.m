//
//  BRPeerManager.m
//  BreadWallet
//
//  Created by Aaron Voisine on 10/6/13.
//  Copyright (c) 2013 Aaron Voisine <voisine@gmail.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.

#import "BRPeerManager.h"
#import "BRPeer.h"
#import "BRPeerEntity.h"
#import "BRBloomFilter.h"
#import "BRKeySequence.h"
#import "BRTransaction.h"
#import "BRMerkleBlock.h"
#import "BRMerkleBlockEntity.h"
#import "BRWalletManager.h"
#import "BRWallet.h"
#import "NSString+Base58.h"
#import "NSData+Hash.h"
#import "NSManagedObject+Sugar.h"
#import <netdb.h>

#define FIXED_PEERS          @"FixedPeers"
#define MAX_CONNECTIONS      2
#define NODE_NETWORK         1  // services value indicating a node offers full blocks, not just headers
#define PROTOCOL_TIMEOUT     30.0
#define MAX_CONNECT_FAILURES 20 // notify user of network problems after this many connect failures in a row

#if BITCOIN_TESTNET

#define GENESIS_BLOCK_HASH @"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943".hexToData.reverse

// The testnet genesis block uses the mainnet genesis block's merkle root. The hash is wrong using its own root.
#define GENESIS_BLOCK [[BRMerkleBlock alloc] initWithBlockHash:GENESIS_BLOCK_HASH version:1\
    prevBlock:@"0000000000000000000000000000000000000000000000000000000000000000".hexToData\
    merkleRoot:@"3ba3edfd7a7b12b27ac72c3e67768f617fC81bc3888a51323a9fb8aa4b1e5e4a".hexToData\
    timestamp:1296688602.0 - NSTimeIntervalSince1970 target:0x1d00ffffu nonce:414098458u totalTransactions:1\
    hashes:@"3ba3edfd7a7b12b27ac72c3e67768f617fC81bc3888a51323a9fb8aa4b1e5e4a".hexToData flags:@"00".hexToData height:0]

static const struct { uint32_t height; char *hash; time_t timestamp; uint32_t target; } checkpoint_array[] = {
    {  20160, "000000001cf5440e7c9ae69f655759b17a32aad141896defd55bb895b7cfc44e", 1345001466, 0x1c4d1756u },
    {  40320, "000000008011f56b8c92ff27fb502df5723171c5374673670ef0eee3696aee6d", 1355980158, 0x1d00ffffu },
    {  60480, "00000000130f90cda6a43048a58788c0a5c75fa3c32d38f788458eb8f6952cee", 1363746033, 0x1c1eca8au },
    {  80640, "00000000002d0a8b51a9c028918db3068f976e3373d586f08201a4449619731c", 1369042673, 0x1c011c48u },
    { 100800, "0000000000a33112f86f3f7b0aa590cb4949b84c2d9c673e9e303257b3be9000", 1376543922, 0x1c00d907u },
    { 120960, "00000000003367e56e7f08fdd13b85bbb31c5bace2f8ca2b0000904d84960d0c", 1382025703, 0x1c00df4cu },
    { 141120, "0000000007da2f551c3acd00e34cc389a4c6b6b3fad0e4e67907ad4c7ed6ab9f", 1384495076, 0x1c0ffff0u },
    { 161280, "0000000001d1b79a1aec5702aaa39bad593980dfe26799697085206ef9513486", 1388980370, 0x1c03fffcu },
    { 181440, "00000000002bb4563a0ec21dc4136b37dcd1b9d577a75a695c8dd0b861e1307e", 1392304311, 0x1b336ce6u },
    { 201600, "0000000000376bb71314321c45de3015fe958543afcbada242a3b1b072498e38", 1393813869, 0x1b602ac0u }
};

static const char *dns_seeds[] = {
    "testnet-seed.bitcoin.petertodd.org", "testnet-seed.bluematt.me", "testnet-seed.alexykot.me"
};

#else // main net

#define GENESIS_BLOCK_HASH @"30758383eae55ae5c7752b73388c1c85bdfbe930ad25ad877252841ed1e734a4".hexToData.reverse

#define GENESIS_BLOCK [[BRMerkleBlock alloc] initWithBlockHash:GENESIS_BLOCK_HASH version:1\
    prevBlock:@"0000000000000000000000000000000000000000000000000000000000000000".hexToData\
    merkleRoot:@"d63183d52e0aa8bc1881f9ad685e2a39373bdc67c7e1f8c19505c06e91b708d5".hexToData\
    timestamp:1413817324.0 - NSTimeIntervalSince1970 target:0x1e0ffff0u nonce:1591189u totalTransactions:1\
    hashes:@"d63183d52e0aa8bc1881f9ad685e2a39373bdc67c7e1f8c19505c06e91b708d5".hexToData flags:@"00".hexToData height:0]

// blockchain checkpoints, these are also used as starting points for partial chain downloads, so they need to be at
// difficulty transition boundaries in order to verify the block difficulty at the immediately following transition
static const struct { uint32_t height; char *hash; time_t timestamp; uint32_t target; } checkpoint_array[] = {
    { 2016,
        "03284ec20e4199d7580111c7ad43ada7d5302daa65a72d9548332eaa49953501",
        1414145550, 0x01050000u },
    { 4032,
        "6a300b19c4c4a23f1e4d495087ca60f24918349e9cfbb0b6f1b19fd348a7f425",
        1414404222, 0x01030000u },
    { 6048,
        "9560c2446300f9406f24998960430babcf42926260c373a68406fc65f2e21012",
        1414652414, 0x01060000u },
    { 8064,
        "538a76819c027cc441b8f788fe5f44b5ea139897d9fd9804e69a0f976250f6aa",
        1414902264, 0x01050000u },
    { 10080,
        "d9002cca46a5613e1340c5837df7369e47f75e7a6ceb5944b4ed1b5683b66bea",
        1415154513, 0x01030000u },
    { 12096,
        "1321214abefabef1a67121a7f5692fa861e0e818ab833ca4cf17f50087c6042e",
        1415411110, 0x01020000u },
    { 14112,
        "4e964510db22e1cccb3688074e06753df2a9ac5565ecf2d878256c42b15263fa",
        1415659615, 0x01020000u },
    { 16128,
        "8213a17a5691fecd73dd30779ffe2198321b00fde7c11e8af24c1b314ad6ec13",
        1415911939, 0x01030000u },
    { 18144,
        "ecbfc835489c927d4a645f06681dc5c3f44b6038538543c8d028ab4585649249",
        1416164421, 0x01020000u },
    { 20160,
        "a28e838f13025cac74d6832e4506bc53073854bc021db3e961b877f5048cc9e7",
        1416417215, 0x01010000u },
    { 22176,
        "fc5221d19852a46b67642fa0b264dfaf532b28a7110c88a1d2e922c373ed055b",
        1416668220, 0x01020000u },
    { 24192,
        "907b53dc7bff9f5c0fa1e5b7253a7f58db43054248a4ef7148bdc2434b3bc1a9",
        1416932510, 0x01000000u },
    { 26208,
        "e02705e87fe9a71d7329cd278a8f818f1a64d8afe8f9ddc69e1543b1637c98e3",
        1417185228, 0x01000000u },
    { 28224,
        "b1bab181cedd8250090cd946cb7f65506f7e5c8bef3299834d3c87af23ed858c",
        1417438070, 0x01000000u },
    { 30240,
        "d3dc3f9029f99e59c9261280504fa52b0a88abb1383236f8bb2adc54f414a76d",
        1417789653, 0x01000000u },
    { 32256,
        "cb07f0db543d24025f97a1fd9f0a6ce78b87eff98950931c3a119034cf9f9e08",
        1418046318, 0x01020000u },
    { 34272,
        "0bb8e62439cffd2fb40df6c6cf4a7fbb4106001993f07708ec4eb0f77635f980",
        1418305975, 0x01020000u },
    { 36288,
        "ae2f8fb6270e68105aa39ee2efcc16198571c4428bfd7842a107737e3931b420",
        1418560239, 0x01020000u },
    { 38304,
        "3e2a5bd68af15e399b69b4e0ff728641d8ba674adba7863365ee3225b861cec4",
        1418807112, 0x01020000u },
    { 40320,
        "b250793ca221dcfacfa2fea4949bd5c3c49edb23a308e579d8d3667243b16f26",
        1419056223, 0x01010000u },
    { 42336,
        "7523994be8c39e2c682e1eedc79250bb67d7ac1f00895e3058e554c83c7d8d26",
        1419306619, 0x01010000u },
    { 44352,
        "4526f8ca25d432fee8c0ed3abc4d1d208de315bdfd11364762f40b5d8c9cc4aa",
        1419556054, 0x01020000u },
    { 46368,
        "6e14dae2494fdd82744cabb1e53b63c3a4bb2e365a12994f2a64aa11f43671dc",
        1419804417, 0x01010000u },
    { 48384,
        "bf8745e084787457d27dfa1765cc5f9eb6b4f6c3eae6b2bd7c0e315b9a0f3a43",
        1420066172, 0x01000000u },
    { 50400,
        "863a1e7735bd984ef3f946273b00508b163f9046b32bfdfb4d20a0c114a9a5cc",
        1420310599, 0x01020000u },
    { 52416,
        "3d0e3a27afd50566dad90977c8a87f62b5e337b898feead74bc32b6014c68444",
        1420559139, 0x01010000u },
    { 54432,
        "bc439f8dc01c9c30a8639726656b34cd9b8d9bae26cd41e9ac1deb1f5cf26ee8",
        1420807448, 0x01030000u },
    { 56448,
        "1a3ed8509dfa2a4d4be84087779cb65128e84163d2c7da3e4904e112d39ad6b7",
        1421056073, 0x01010000u },
    { 58464,
        "54554cad7bd4c252e59747fae2eb48f14549a7a099f3ad868b0e57be1cd5cd6a",
        1421329516, 0x01010000u },
    { 60480,
        "e15afe3b7bdabdac8fdc7671db188a37963ec2303776894699e9c74499e5d795",
        1421591600, 0x01000000u },
    { 62496,
        "157cbc4da0f0074ac135f5312789f9874b71e07c0d14e9a8a86780dc70c61ac4",
        1421839183, 0x01020000u },
    { 64512,
        "229c1a350610e712248484f5eb90200eac74c348554b3a5d6bbab64c27adaf70",
        1422093619, 0x01010000u },
    { 66528,
        "1807d62e7c15c461b6085573101359fbb09e3f53b05606fc2e5d3ee23e95ff0b",
        1422341870, 0x01020000u },
    { 68544,
        "afaea16e46aac3a3162da549f32c306830a695c616a37ca02351dcdd89c9519d",
        1422592147, 0x01010000u },
    { 70560,
        "c5174e9c46ce608fd232be1d1583dac5794fe66249ead8189d02abe0d21a5697",
        1422840023, 0x01010000u },
    { 72576,
        "b0880ed7093cf504e66f9befa25ba2c5d06458f442c7e3ec3e5161627236d003",
        1423088560, 0x01010000u },
    { 74592,
        "2bc5dde36adfe1972aa15deea51506afdbab6c2a2cddce7ac927af4b8a694197",
        1423337040, 0x01010000u },
    { 76608,
        "4eb152eb8acaec1ee6751a1d882541ccfd1116644cece7115e48b9053fa31def",
        1423586455, 0x01020000u },
    { 78624,
        "ee4e53a120bf8e702a93e838bf3a18bbd4420c3ab061bd6db42cbcc7c60c84c3",
        1423836185, 0x01020000u },
    { 80640,
        "0a803a4a3c603b49975edff8a56c1fe5546809747b4d67ce62afc8c29bc084ea",
        1424084655, 0x01010000u },
    { 82656,
        "80cfbcf0d50c9ee9e9f778a0deff9c477780af37d834d5fd487b8a5cb4840a00",
        1424334655, 0x01030000u },
    { 84672,
        "ca0cd72c2ec908ced93af1c3c217edde78aebd0fc48c086815dbd05ff52d351b",
        1424594482, 0x01010000u },
    { 86688,
        "f6024482242eb675ae7801a228b8e6ae60440b261fb93fa402f8cdc87b13d630",
        1424841725, 0x01010000u },
    { 88704,
        "a066cde53ba88311213a63a581646cde402be6bafb28841ca365ffc228728ea2",
        1425089588, 0x01020000u },
    { 90720,
        "590be867f23a06ca35aecc218680cf7bfa91916cc71763e5b7cb1050f49684e4",
        1425339038, 0x01030000u },
    { 92736,
        "bbda865d34af635f74d5fb6757c3226e1c1c89677dd3bbdb8a2d54e6eb4e742e",
        1425588379, 0x01020000u },
    { 94752,
        "5a5ed9c3b3f3ab2da6630442208e81c2ea19f4718a874a53c886630d246f8f32",
        1425837017, 0x01020000u },
    { 96768,
        "7992b5477d27eff0ad9f11f0a7e0ea49f906e9c615b52b46804af7d3cfee0c3c",
        1426087301, 0x01040000u },
    { 98784,
        "6bc0f71be07abc45a4d476b96f6212481e72dcb5760c67c18b5f5c7a40b9f4aa",
        1426342982, 0x01030000u },
    { 100800,
        "dfa5fd477e522d3c9070c16710b3fb946c96e8022bccb997e6d29d8304aca8f1",
        1426590543, 0x01050000u },
    { 102816,
        "f403edc70feb34be9d80c68b3ea4a64f69742e7dbc278427996edf8ad9ba8b87",
        1426841626, 0x01030000u },
    { 104832,
        "7edb82445e4d833c666a851d91e1ab7cc096f97b62daa57ccf4f71e4e253882c",
        1427090106, 0x01060000u },
    { 106848,
        "0687b1391ccd734bfe44ea89c1047f4a39081d5a66d118ef0a915ddf035f2617",
        1427352053, 0x01030000u },
    { 108864,
        "b82d998def9c440f8a87b2cc1835af38ada9cb546b724b696ce3ee8bd1ba2ab1",
        1427628423, 0x01090000u },
    { 110880,
        "d440f8d1009fcf8837759080ba9955c0767a60ee6d71f6ed27e6a660880b4625",
        1427884443, 0x01060000u },
    { 112896,
        "e514711dadfc73dfd9e2199badb25401b448584f08483e236b8e815ee558ee17",
        1428134293, 0x01040000u },
    { 114912,
        "fe976636e7d40159b7714655a21bd3532afd258e7aaed7f298d4cb6aa6bd317a",
        1428383423, 0x01040000u },
    { 116928,
        "49343952469f2925e03890b668130c1ef688f3a721d08e67e58ece5b4279b8c9",
        1428638388, 0x01050000u },
    { 118944,
        "4a2e987ececfc104437e9f48c989c0df6ac186919d211950fd21b0f97184428e",
        1428889124, 0x01030000u },
    { 120960,
        "e36e9c55485eb702d9cfc5376deb9936bc491bf02de506e79ed55be01a6a0c95",
        1429141852, 0x01040000u },
    { 122976,
        "7ab9b960822af91bc718cfec60cb60e69b875ad9d5ed299efb0815d4610ca4a2",
        1429415638, 0x01010000u },
    { 124992,
        "d318d9f22cbcb6a02ec81b7921a045262c96f27ca2c0f9a610b96784daad1eb0",
        1429680493, 0x01000000u },
    { 127008,
        "670d8b374bd66df722f6f5b20ba0bdcd6188c1d1a992f9a6d88dcc65bfef64e9",
        1429926784, 0x01090000u },
    { 129024,
        "e4102692f308a589a5f53cbaf5230801442a92f7353efd774fb48ac5cabe41a8",
        1430175912, 0x01060000u },
    { 131040,
        "49c2161e7a4f9c22ea7ed64ccda6fd008e0a07662635a303fd01e9453b0fe642",
        1430427753, 0x01050000u },
    { 133056,
        "01729f583630cd8ca616bd3a7daac578060255a1cc0d7f8bab505387f3498924",
        1430674931, 0x01080000u },
    { 135072,
        "dcda11cc3b115331e4a398070b3a596e52cc676d1761f6bb412b7d04740a4ca0",
        1430928447, 0x01040000u },
    { 137088,
        "36cbde4c10f8821ef5545d2435e9d6c6ed6ea4a9af3ca703d9cd40a53ba97d5a",
        1431180850, 0x01040000u },
    { 139104,
        "4ac71fa21bb15d2fc8883085f53265640e06e014a3761e794a84280de47455ca",
        1431441450, 0x01010000u },
    { 141120,
        "3a14975f342e9991c5494719be7656aedc6cc4f5755357add11b03134f6df9ef",
        1431702967, 0x01060000u },
    { 143136,
        "48b6b7cc66bace130edbc46fc82e6ea6c85498005c7f6dfc8d4f631fc08ca857",
        1431961908, 0x01050000u },
    { 145152,
        "15461cca47bbe15058f3a408fe12a2362fe0f5c58183f1098ec704b310e83382",
        1432230837, 0x01030000u },
    { 147168,
        "cc97ff1973bcb671a44efdf2f0e9de9fd3a4be7eecb55d637b3617b9e907e64a",
        1432512769, 0x01030000u },
    { 149184,
        "bf588af1b3aa84f111432ca643ae31efe7e0792a7d132cb522ede55892d5bf9d",
        1432776274, 0x01040000u },
    { 151200,
        "771ffb9e96955f1c8af7c8206dfff85ff52c89c27106157e070189e914ee575f",
        1433115842, 0x01020000u },
    { 153216,
        "58c37bec993e62989063b22f9ce8d198a1b66c23390983d65eb8f162bf4ed157",
        1433474179, 0x01030000u },
    { 155232,
        "0dac5572ef26664cf559b57b7c8555c1f2eb8437688aade2c928c07854733f01",
        1433742695, 0x01040000u },
    { 157248,
        "7d70dec0f3d9a1161e9d6fafde76604dc2bd4e8fd77228b1bf9fa0a117893ba2",
        1434001206, 0x01070000u },
    { 159264,
        "0e9ebcc9d65a2c6019375f61be0b9728eb8f31f002257f9ea6571a4c9b8f9942",
        1434261065, 0x01080000u },
    { 161280,
        "37692ed996b6f801edb1f0635521e1efdf594346bccb320bed3c22478e8a4b41",
        1434520025, 0x01080000u },
    { 163296,
        "410235b66b743bf0b8b531b2a927e40671f14b4dc1f4052189ce262fc462485b",
        1434790773, 0x01030000u },
    { 165312,
        "d6df44e63d90a7d8d0f94868938df0251b576e78a02e8f658dba91da7097d88a",
        1435071673, 0x01040000u },
    { 167328,
        "5b7062ab9433e0c097fbdb3623c31605a63016ae31ca564879b29f6fd49266eb",
        1435325593, 0x01030000u },
    { 169344,
        "1ca35a0a84c1f2a560c09257c969f6bef727de46c04297808bfb763dc70b10c2",
        1435584679, 0x01060000u },
    { 171360,
        "6ad140d3102eac4d705e91b9163f813721f090652dde885d8d7673ba61cd2e31",
        1435863068, 0x01120000u },
    { 173376,
        "cd1b1b88de49a15f5d190d4622411cb100feaf86795b7051932a46fd80dcf11c",
        1436128625, 0x01090000u },
    { 175392,
        "e7dbd5defb8d6c5883499dfd0b5e43f6347fc02bcba5d7d4242184c7415dff3f",
        1436384508, 0x01040000u },
    { 177408,
        "fdd10ccb4db95665022bda070cb7dda8920bc824e55223230d7bf8a4c63c5936",
        1436642809, 0x01080000u },
    { 179424,
        "798606e4348757c11e0c03de0da00449bc4610e3128dc47f5d204016951f6f20",
        1436892299, 0x010b0000u },
    { 181440,
        "4ef56d388d08dbf1716aae1599c9fcde709927ce3265d8683344929a58f2c2e2",
        1437143635, 0x01090000u },
    { 183456,
        "e12a56671886e9e41bdd76d000d319aac18003dd065576562a753f0860562df0",
        1437396766, 0x01080000u },
    { 185472,
        "d77257d3ca20c5eab0d70c439aca3be28c81bec441b9f67e68ee54115ef98c62",
        1437647056, 0x010a0000u },
    { 187488,
        "94359f739adc99d86ab2e2447b08adc9c1b7f106ae0466226a3e93e6aab31329",
        1437900474, 0x01150000u },
    { 189504,
        "bd3b3fbf2ab9e906d96f1b135b210cccbacdab2cd72a57e81481210a8ea7bb29",
        1438153915, 0x010c0000u },
    { 191520,
        "b6ac9a876b8a21bc3191ddd286058aff8a4285a7cef3961f27b2ef5d44067585",
        1438403365, 0x01180000u },
    { 193536,
        "f7eac6757ee72967970a2ce152cffa4759a5ddc7088da9b8c2fb84ff3b5fa43c",
        1438656516, 0x010c0000u },
    { 195552,
        "27507b6f44a3fa020ab1181e3a927eff061a431b4a2b7a22109ba69d3db0a0af",
        1438903001, 0x01120000u },
    { 197568,
        "d9a4d97a60c4a7128af11a84eef4d9195578d44a09ce811828bbffe642f2f0b5",
        1439152576, 0x01100000u },
    { 199584,
        "7777de0a5b64e2baae6bb796834a142db0e046ceb9ed6bf08ed836f5c62d08c7",
        1439403248, 0x010c0000u },
    { 201600,
        "92ab4f934217d6232523a96caf678876988eb2ecaab8ba4b30fc23283005aff0",
        1439653089, 0x01120000u },
    { 203616,
        "bc4f1d43fe8f25e7e88b5dbf006f5bf5559b5a2cb90602852840441c15649596",
        1439902651, 0x010f0000u },
    { 205632,
        "319164acd28ed41a54b9f0356c28594eed2804eaa54ec3a1efa14f4e9c970296",
        1440154871, 0x01100000u },
    { 207648,
        "8dd940b2804904d3181a084a8e613f272121259340288eba25c7e9be35919464",
        1440416408, 0x01050000u },
    { 209664,
        "17013b1cb6a981b6bec41d372577397526770beed015a18f24f6feeaa2312ece",
        1440664322, 0x010e0000u },
    { 211680,
        "9bfdea10f893dc1e3ba8334c9ad0366e8a3ac8e25501d2b7ab3e8abebbb6a500",
        1440915970, 0x01130000u },
    { 213696,
        "5bc6fc2cc536d7614d849e9f166278373a25c58c5d875d23404b542fd652a3ac",
        1441169805, 0x010b0000u },
    { 215712,
        "315b02a106d2291560acc9b4068520e362e5e539503602e551eda3fcddeeadfe",
        1441419893, 0x01170000u },
    { 217728,
        "7032c60ffd9ec1e42bddf15928df2654e296c727a4151c951bff4d418162e22b",
        1441684308, 0x010b0000u },
    { 219744,
        "f3a658e02da1a1ecb9822bae288c33fe55a21330230e5502139cba024ec8de02",
        1441938941, 0x010a0000u },
    { 221760,
        "d44b41ad667053505ba4dc3295bcf38f1eca3fc193c6141526a26adc0c76df6f",
        1442189539, 0x01070000u },
    { 223776,
        "cb177aafcf7b4f9df41665e76b9ea4c53c6a9cad679cc5317f9cbd5d335c7f7f",
        1442444825, 0x01060000u },
    { 225792,
        "8623d206d5422d941d8e5ec70b8d7e4d8302b81f138d43984106baf7be240f28",
        1442695180, 0x01050000u },
    { 227808,
        "6012d9458db8f8c2d32fc361d2e128fc56a6f5d0b45d5a0db4b504d19c49ffc2",
        1442947969, 0x01060000u },
    { 229824,
        "693835c8fc86810a98659f8124843d225ce169a9edc2ff88cd7fd413aeacfd21",
        1443202978, 0x01060000u },
    { 231840,
        "cc8e1be2646d012e04fb5f89d89ae3955379d1bf6388534c476943622bec1feb",
        1443449632, 0x010b0000u },
    { 233856,
        "0e1a14995f7fa6ae1e63076e1b1a461533bd825eb460a2508e6f57497f86bb76",
        1443701376, 0x01090000u },
    { 235872,
        "6ad35a50922450423772c0ff9543009b85a832c8d5549be7335626068dff4431",
        1443951762, 0x01090000u },
    { 237888,
        "4a36d9cbf0b31d95a4767c9e7087538e562db4ee9898c3ce6c184aca05d2b6ae",
        1444201724, 0x010f0000u },
    { 239904,
        "82e31b41bd5874210dc55933ecd5d1afe2aba205425e77f0fc20a93fac7a3323",
        1444455325, 0x010b0000u },
    { 241920,
        "092a3019b3294cf6422a21d5e8a69e3c1c37eb5785cb8f307142e66ed4a24d2c",
        1444700540, 0x010f0000u },
    { 243936,
        "ef54cabdf1c10870546391c9b4abb89bfa9115c5e4ebe858ec07aca68cec5197",
        1444954326, 0x01090000u },
    { 245952,
        "525f6dca307ef14455a46851f320bc9e8ade8b6af689566fc24e31f3676f64bb",
        1445205295, 0x01170000u },
    { 247968,
        "cc0f310c9e9ffa83192a2c0d099da42f8cde6a2f1ac9e944bd170c254b244c72",
        1445457599, 0x01100000u },
    { 249984,
        "ca94abce7870802d6e8db8311b7a00b8865d75532c8dfa259e8c6cf105aeb70f",
        1445705540, 0x01100000u },
    { 252000,
        "017c53a6fd276babc30cd988f409d72f6990fdd5ece3cabc4a28984aa25843fb",
        1445958986, 0x010b0000u },
    { 254016,
        "e490b9c4baf75fd80c44e5854751b923938178c665cda93498feb2601bf86e61",
        1446208401, 0x010c0000u },
    { 256032,
        "370c1f45528c59811e85034d5cf5fcafee696b90193d4f4125f6bba5986307ba",
        1446459769, 0x010c0000u },
    { 258048,
        "a3cc22f7976d880bf9c88b039db3dbebf9176f7cdaa936098fe938274a14e5ea",
        1446716607, 0x010b0000u },
    { 260064,
        "d58d4cf938cfc15a5ad113537bad6199194a54eab8a7a85151513a2bfd0be87c",
        1446967082, 0x010c0000u },
    { 262080,
        "1a69b58a11e3092c4b981f8e60a1ca3fd95937aba931579613f5890e95746724",
        1447231020, 0x01090000u },
    { 264096,
        "de70707841bff068804d3f6c12da806c8ef2af29e401d0c8c0a50331fc26ddf3",
        1447483708, 0x01100000u },
    { 266112,
        "b90e612a18bff100d2d1214c24a42b5dfbc88506979392a82b3d874f4b5f3f9e",
        1447745690, 0x01150000u },
    { 268128,
        "02c23b05564148abd6c50db868d145a4c1de45152574d00a7359acac821396c4",
        1448018582, 0x01120000u },
    { 270144,
        "5119b65fef5e47e27a9103466bbfc5862b1eb6bdddfa705283be58a6207ccfc0",
        1448343596, 0x01090000u },
    { 272160,
        "e390ed552627c5a87d9ba48c57c24337336e7950e8bd55b0b3569cbbddab98b5",
        1448878148, 0x01070000u },
    { 274176,
        "ba6b3c842bce9de6b27829de540b5221a435b231a33c3a0d1f888e3521a88700",
        1449329393, 0x010f0000u },
    { 276192,
        "e417781de4c9bc33ae8469808433a6272a2fedfcf9519a18484ae8bf0a5dff95",
        1449607065, 0x01150000u },
    { 278208,
        "1d4f5bf58cae4607fee44a52770a25706567e5a5ecd0b7ade1b9a498aa42dd2a",
        1449960125, 0x011e0000u },
    { 280224,
        "f3f6a6fa943601640bc4e0b179a2b3e488b26a87ac81141c4fcc255ff0db60d0",
        1450346588, 0x01260000u },
    { 282240,
        "0f01a1d71b3275b93923499d0aec93fd4e4560693193890d24db60a930e04532",
        1450615078, 0x011e0000u },
    { 284256,
        "4cf5564e7a95ef0db5a5eb634db52e7da3d973a77cce6497bd6c87637a85fd39",
        1450894568, 0x013b0000u },
    { 286272,
        "869829cbbbf5e2c5ed89b95f2e14bc3391b80c372380f2d0f07cae64d01f53dd",
        1451675205, 0x01190000u },
    { 288288,
        "fac3e90d72b166dbd537247690620fd7fd7e94f2d1f9fb892a21cf4914ca6ff2",
        1452305986, 0x01550000u },
    { 290304,
        "1123ca0f85f145c92e7a12a563d06e3728960e378fb643ac07a3aadc3fa3747a",
        1452997148, 0x01090000u },
    { 292320,
        "f037160d88ae74a461c6f6bc95e82b4118b2346bb12daf4affca2f86c2cdcc73",
        1453689579, 0x011b0000u },
    { 294336,
        "fa8065bb612a8335edd589710cf0bf3cf65b904e146d548c7e9d81b564edb6b1",
        1453959330, 0x01310000u },
    { 296352,
        "ea1b58605d73491848a6538ab9e44c97dfd803c06003d30bc5a4eb1fad7b73b6",
        1454237103, 0x010e0000u },
    { 298368,
        "147181c0e657251c29b26e32a8723f181340cfb27c636a1b686d2272730de587",
        1454644410, 0x010d0000u },
    { 300384,
        "c33ef539b112f8b7f8134689b1be2e1ee088a4dc75eb998b8e00988d66deaf16",
        1455190838, 0x010a0000u },
    { 302400,
        "16adffbdeb0ac9453bce1c0e0e41852b357f4b504f03bcf47d0438926671949e",
        1455619662, 0x01130000u },
    { 304416,
        "7b01bbbb8b183955428b0375856fab25753c277c0e04662e3b43039727f9e760",
        1456176629, 0x013d0000u },
    { 306432,
        "60538bb9929a9bd9917720a2d827ebef08e485cd81cefd5b4f5b8c700bd3e975",
        1456865968, 0x01370000u },
    { 308448,
        "a7954328da1e5edd8240d820134c6be2644b40faf4bc2b6b6cf06db7b24d2a18",
        1457388169, 0x01110000u },
    { 310464,
        "4953fe85ee68216488937fbab9edf8f5a2b8dac2eb2dd2c1d4f2cf3bc7287dbe",
        1457859061, 0x01220000u },
    { 312480,
        "efdf78d91a4637cf87d71328dc8c12321ebfbd5cd2f3204ee593514a2bdc41d2",
        1458214137, 0x01090000u },
    { 314496,
        "7368d7f0b5ddcdf04f062d6811ac9804358db498bd723bf58f83bf5f9ce9f699",
        1458754856, 0x012a0000u },
    { 316512,
        "fa8be3ecc11244b1ddde8797e75df4c0168d44e969f3c6a22cc13aebb8b9a570",
        1459358193, 0x010b0000u },
    { 318528,
        "27158d740366a54665d663b75a7729995b36506e1f1a7331d66fdcfe3e16ab53",
        1460071166, 0x010a0000u },
    { 320544,
        "cf47ee20251ec78f711b8f82e1b7915949e562a8970be4afb704f1b85e41df74",
        1460919070, 0x010f0000u },
    { 322560,
        "cce75a5b99dde4e0a7c5513e5b67544e3b372d8622f601c8f1e01bada049f0ed",
        1461711898, 0x010e0000u },
    { 324576,
        "7725e726c18db2562012a010858cbd49d539c07ab7fb9aa592669ad5749a42fe",
        1462388437, 0x01390000u },
    { 326592,
        "52448d2b3ca919bb54b99dde9225bc45f38877111f80fa4b5d022437c2615149",
        1462894556, 0x01270000u },
    { 328608,
        "62bd4fd3463b641e1b87155f53220e539b343fdc6de747cd04adf46cad9a9adf",
        1463639966, 0x010a0000u },
    { 330624,
        "fd3274fcb12a25898d9bc2582728b003c232a9162ac5a4ad1e35d579294d90a6",
        1464501939, 0x01270000u },
    { 332640,
        "e5680cdc8b2198cb5e4171cd0c1a083b095e64412c8105bfd71c927be311154a",
        1464991363, 0x01150000u },
    { 334656,
        "1ea80c306c4f7961b80cb79e577ea4d335d881140f859ab41f498eb6d31baf9f",
        1465254370, 0x01110000u },
    { 336672,
        "b5950b79d55b44a7434db17aadfed5049de0e02a3f5ec0eb509193671c6da9b4",
        1465861573, 0x01120000u },
    { 338688,
        "e639d86e141e8eb61ac02136426fe3057f400a393cca78100194f07fa4b9b324",
        1466160382, 0x010e0000u },
    { 340704,
        "b1e4c9a2ab4eecd18fac15617f857fea4f1db48f1d36245b6b291cbc2664374a",
        1466420365, 0x010b0000u },
    { 342720,
        "60fb81627055becd54a6ad03f4c322770b8973e6325e266dbc6f72e92a96c72d",
        1466766381, 0x01130000u },
    { 344736,
        "1a7b9b57beca73bb36145770979e8a98453933088c66bf4476439b38675626cc",
        1467225785, 0x01110000u },
    { 346752,
        "75d820b45cdb651d4548dac3274121b6d4ba8477e64ef880e5657308501ea1c5",
        1467699276, 0x010e0000u },
    { 348768,
        "4c7e7ad0774b84d9ab329c8925faa64dd5c23305197c6a2d73b1cf96b37dfcb8",
        1468174815, 0x01170000u },
    { 350784,
        "e284a457665506e003e866894bf05508f192e672e154864b09b41149bcd52242",
        1468537944, 0x012f0000u },
    { 352800,
        "f725563d8d2285cca12fc110d7ae9705167a9bc124f5d0a4666fb51fd33ae9fc",
        1468797319, 0x011b0000u },
    { 354816,
        "db770f6da02fa0a2a10fa54ca1e381d611f9eec2e516d9b69eff048f30c7b2ea",
        1469084184, 0x010e0000u },
    { 356832,
        "81c3c38e7e873254e6fceaabf9192b37b34c08412cdd7fd384d946900e143d1a",
        1469332439, 0x01100000u },
    { 358848,
        "6dbb72060b76ef39e72f37083d051966703796b76867d64c46a4744b58c525c3",
        1469583811, 0x01100000u },
    { 360864,
        "5e9c7da23d3f482e3d9b7b5dc4a96e9a3376ed34e360e8a446c555d885076ed7",
        1469837708, 0x01130000u },
    { 362880,
        "e08ae494d1326b26bc32e3d04e9f52d42ce41e926abb5c80d97767dd310c1d89",
        1470086364, 0x01100000u },
    { 364896,
        "398beca48af7208bb3216da7abfc223b55a614a24e2f355624370c3e84f40d3b",
        1470362810, 0x01110000u },
    { 366912,
        "23258d0116919433dacaed5b755d252825f244636b05dc02abb68c28a7e9970f",
        1470611461, 0x010e0000u },
    { 368928,
        "38d809dedcb966d82fabf4d2aedee44809ee360b8f99497cd5bdea20ce6f1509",
        1470863895, 0x010a0000u },
    { 370944,
        "19ee4dd69cf60edbbbb2cd36d43e49d3094f86f33155d57043f793079a8990fe",
        1471117585, 0x01110000u },
    { 372960,
        "6cad2c40dc94aae7b7c6485853f7de5806dcbbbf42eb72d2cad7552de49fded0",
        1471368949, 0x010c0000u },
    { 374976,
        "45d3c5ab8a1a8376c07c766ac62212ba24c79d65ac24414cd2f1fa0b0cc2fb60",
        1471616226, 0x010c0000u },
    { 376992,
        "fbcf678922b3477d5985d54904c6f6b4514db55f9d0f7c97a1c50ebef0d06579",
        1471863445, 0x010d0000u },
    { 379008,
        "d6a10d57a54daf19c5dd09536be4c29a82985379506a0835b11538eec54075ba",
        1472114220, 0x010c0000u },
    { 381024,
        "a84c0c128732d9bf46175c2d8c7fe0f65058c8d789e17cc44c93c10b6cfb2da9",
        1472366058, 0x01080000u },
    { 383040,
        "87547aa0ef9f8485bec381701646febb18bd12136d5f79cd4e922ab2d9eb15f0",
        1472661695, 0x013d0000u },
    { 385056,
        "7e08cbeca6af65ea80147f0a0b426f21d170ea8a5f8811657114b493c37cbdef",
        1472966747, 0x01090000u },
    { 387072,
        "256bea770759fda9baf1bba92d2dc235638bd93165ad73e898c0fdf60ed45361",
        1473216909, 0x010f0000u },
    { 389088,
        "8277c2d0bc1f8c7c961d99e712dd6128477c6d75051483b5656b51b97e5b6643",
        1473503953, 0x01210000u },
    { 391104,
        "3c80cbe2c4587e70217aed893453c444ee61dfd7ddc7ff4a82068b32f4c8f53f",
        1474191403, 0x011b0000u },
    { 393120,
        "ab17aea8a3c9959d6bbd740c603cfa149c04bbbd2bcbf1f6fefb906554e17185",
        1474667121, 0x010f0000u },
    { 395136,
        "0f6b6a9844bcc1c3be1d45e388ef7abb35e4789902363521201d4e54226e5d0e",
        1474918479, 0x01120000u },
    { 397152,
        "ddeb26fd466912b758cb5942f7d5220f1c90d28abc670c8232cfe0e2622b366b",
        1475165382, 0x016b0000u },
    { 399168,
        "c8958bc99f8535a6da1de2b91e9d0f19f19fe66a697dfc72c5b82e2d0a27c0eb",
        1475439795, 0x010d0000u },
    { 401184,
        "ca73a9d2459d495e692fa227abc4ae282a62d843e73e360413fc64ea195ef49d",
        1475690085, 0x010c0000u },
    { 403200,
        "742099c851cf85af7d3e81ee9d9568d3b153752a6d9a59471ac1631711ec4b52",
        1476002818, 0x013d0000u },
    { 405216,
        "85f0e6decbb17322db6aa077eceeb7bebb54e89e76b34a52bf648b0dc03db4f3",
        1476417482, 0x014e0000u },
    { 407232,
        "084a6c65fe99a719ff7d88a4c9d70345a079436f5ad2068809c44ea8fb77d0f1",
        1476749814, 0x01710000u },
    { 409248,
        "3367bd486cc8d03931d951724009419ef4d80333ce48915a9994eba4fc1797fb",
        1477009743, 0x01630000u },
    { 411264,
        "b9e485331600b6504ef18084d5a92975a12ef9e7fc03be717f0d4f8669db4b0f",
        1477274198, 0x01750000u },
    { 413280,
        "48b327449e66bccdb9c2c499b108d05b3c387a8b151aef906d5d1f709a185378",
        1477528333, 0x0200ab00u },
    { 415296,
        "fb2f2398f55c98169f34d2bf5670f53e986a810cf1c82287f229e41c56965ca3",
        1477793264, 0x013b0000u },
    { 417312,
        "7f2d27acdff165a14b7d166a003c359ea55059a1d4bf1cef3d2f965817d9e9b8",
        1478051253, 0x013d0000u },
    { 419328,
        "3dabc15b4a005a7d32b7581dc96a6d7e139601f537fccde1ca55875f5b6102a0",
        1478305753, 0x013e0000u },
    { 421344,
        "14f1b443b2b56bc79ffe02f45a6a8ff0af60444914b5dfec2130bcdbbcaa1707",
        1478557774, 0x01630000u },
    { 423360,
        "f939d2ba6ce7390e7003a47b791a5908f47ec20fa218ff638deb3b71969962ef",
        1478853258, 0x0200b000u },
    { 425376,
        "e49dad7d72dd891f56d60aaff979249d087dd1bdc3c4afcbc4409e0f534751ba",
        1479240833, 0x0200a900u },
    { 427392,
        "b8e356b386027af7926b49fe795fd20eb233eed03e3abae42d923def7709186e",
        1479510837, 0x02008f00u },
    { 429408,
        "d6f016c53554fb5e37ed6b5cc29527a3380a0716cfe8672f59015d0c88af9917",
        1479875666, 0x01340000u },
    { 431424,
        "2a8833670f51bd85170f45d40df8725547d5ee94b5d16134a2e6591fdf4db785",
        1480346885, 0x012f0000u },
    { 433440,
        "e621e1a1b265341a598ab33342585b8fbf7e1d4a300a1b8c69afb3565fe1a07d",
        1480869343, 0x01350000u },
    { 435456,
        "01ed1bfd4d03bee169d1d194b6f785903861352bf98f98f60937586ca8f9f817",
        1481360877, 0x013b0000u },
    { 437472,
        "e0c3f0e43e5e8f05f1fb27c18f71062b55d637a37928d198f89102577ae71867",
        1481891198, 0x0200ab00u },
    { 439488,
        "51fd8954f886dabc5acac137843137b694ca6b049c1878b496991f73c6148f64",
        1482428490, 0x01330000u },
    { 441504,
        "d40f6f994459cdee4cba721f585d1476778da12dbea22220a3889d0cabca0107",
        1482775971, 0x0200b200u },
    { 443520,
        "a3c28ca06d49d2a584bcd49ea97489f8b88c5d1694a4f12f470079e5fa370318",
        1483144365, 0x02008e00u },
    { 445536,
        "973f4088d5cd62cb089c81da79e9f571ada768c9c2575ea2f0d57de3c6e3d70f",
        1483545068, 0x0200a000u },
    { 447552,
        "af14125288051650bb34bbcadf8a5f85f0acd10aac49aa0bc19d21f13fcba3c5",
        1484001358, 0x02012b00u },
    { 449568,
        "171da7a03f0be1e8a3b9806782ea1064ee688db98f71b0dac8a0b52a168aeb15",
        1484262342, 0x0200a000u },
    { 451584,
        "8826661048b5a10c637b0da8e143adb40fac84b2d623818aa302cd5ed114b905",
        1484514798, 0x02009600u },
    { 453600,
        "f1a90fc42f1e157747f0750d61e9932bf6c4842b5ce3d3d4813e1d55ebe67c2d",
        1484763831, 0x0200d100u },
    { 455616,
        "c8a2ad20abdbebe6a15377924d27f8f1577c68849aa1a72bb61b0edc07e7bee3",
        1485018800, 0x0200bb00u },
    { 457632,
        "9a8c7a1426d65660796eedb4f8c659f5e965d9590357255c39c5b2a02eb7fc84",
        1485270014, 0x0200aa00u },
    { 459648,
        "0b28b27b789284c26d6ec9e3067a4c5097d9f255aade5c7c4ef6fb72a8cfedcb",
        1485520414, 0x0200f500u },
    { 461664,
        "f2e31fb3161dacceef35e5bd011e22c9c2818437632fd6343cc676fd326d583e",
        1485799307, 0x0200c100u },
    { 463680,
        "27474e38a4127ec317d1f8cce1e1dc6f9a2aa9e39a3b92b58044ed3c35a4fc70",
        1486077785, 0x02009c00u },
    { 465696,
        "190eac261ddb07fe867865b3bfbb99594b0fc320b4201a3ca1e6f8032ecffde0",
        1486357617, 0x017a0000u },
    { 467712,
        "c9c4e9fc3a60e703df03803ed52c95f0752f06503a9141031c76794e47e0c8dd",
        1486678171, 0x0200e700u },
    { 469728,
        "d6b150f1051f7f6c2dec407e89ed691547798908d9279458ce0cb458e9898a94",
        1486948739, 0x0200ca00u },
    { 471744,
        "18e9b22accc8f1136f0853a7e092ba51e672151dd8e07608e35163f3cf1d7b48",
        1487237024, 0x02013900u },
    { 473760,
        "ef080e5bb4b05562d1e88439a22062cd55cdf0e5dbb951aac58b7a0907edead7",
        1487535769, 0x02008c00u },
    { 475776,
        "67dbcb86e5a44dd4ae8284f1b57e11129e5450531d068da9c0d561732463efda",
        1487836083, 0x02009500u },
    { 477792,
        "d4b154d1f5a7fcf0a5396e29cc195f0552e31c4ab5b7f5bd4dfcf6ad0a89f51c",
        1488119007, 0x0200ba00u },
    { 479808,
        "abbd1b1869867dcfcb9a4da1650cc8dd278452050d54097d87f4bd46286dc9aa",
        1488495809, 0x0200b000u },
    { 481824,
        "3adb2ddd5c63741ed2d9a1fb9dd172b9bbf364e723dc83638bf1245dd3289230",
        1488801654, 0x0200c200u },
    { 483840,
        "9431d4dac3a37813a32464fef331b686c51e9e55d4b111bdad6061740f063371",
        1489141514, 0x015e0000u },
    { 485856,
        "7eeb35530fc26e688eb94855486359368972b8b45f610d61569a53a38d3602ef",
        1489457000, 0x015b0000u },
    { 487872,
        "8259e3f0b05dafc12120b4ad0717ee96196ba4a255ed40e589789be14721e4ae",
        1489822247, 0x01180000u },
    { 489888,
        "f3486e6eb9b835275585a7e4d963d4fc887bbf85ed9a6f62847e8b415e4b5f03",
        1490181590, 0x01310000u },
    { 491904,
        "9aa7edca664fed4d02942ded8221afbd8d2430ea8f508831f7ed459e0262b631",
        1490736155, 0x0200fc00u },
    { 493920,
        "83ca93a37a86dd6e7d03f66bd3ba1941d90aad964d460826a062605285c124f1",
        1491200914, 0x016c0000u },
    { 495936,
        "2f7724b0cc703b32e195f5ce2b9b09f53c23a8e1d778b856f444537379b7cc10",
        1491759107, 0x01440000u },
    { 497952,
        "686484ec7c903a2c97bfdc4d33d503a1d6280698c6d3563c33a0b33305314b4d",
        1492156968, 0x01620000u },
    { 499968,
        "992028d9a730c60b18791088f05b13374df809bad1e770dd43c1e94f17b8d56c",
        1492705397, 0x011a0000u },
    { 501984,
        "38ca63cfb927d464d20d56eb321ff002bfc6e8b0479a409d8c1241df119dd5c8",
        1493035776, 0x011c0000u },
    { 504000,
        "ea1418564c31a0409635eaa2ed0264deffba734b6bffa96fd599909fba22f18e",
        1493553240, 0x02013700u },
    { 506016,
        "ac137b36051cf28e98a8d55ed67ef0950be0a739d6cfa36a208ded23c7a383b3",
        1494071313, 0x02009b00u },
    { 508032,
        "69154da8726cb816fc70816c074e679ea2553d0b36449af528d6addcada1639e",
        1494680625, 0x0201b500u },
    { 510048,
        "b26ffa450a939ee122473df95ce5775ba25e0ea04648555c303528cd6568eaf2",
        1494990306, 0x011b0000u },
    { 512064,
        "02acd30db231da78b5875a5484175b797ec63d3c6b694f903a1433f578ab6b85",
        1495357935, 0x0200af00u },
    { 514080,
        "68cd8ff49a5379d2d2f8c034219b461e8d8e694d9a97b369ff6462ca0102bd69",
        1495680250, 0x01520000u },
    { 516096,
        "f3d91f232f25aa4d3f78364d46a0f7c10982fc7c04be49ed68e1c89ea09bb9f3",
        1495995043, 0x0200ab00u },
    { 518112,
        "48c681e682b12c8f5de394c62bc01ff98bb512f0824eec945960dd90b05a47ea",
        1496271023, 0x0200fc00u },
    { 520128,
        "73ce6c013094d2d2f5745aa0621e538f7a0ed9047ecda9e8319cc7d79b126897",
        1496569532, 0x0200c200u },
    { 522144,
        "9bfea6250ece80a8ebc89d31d1fdbd0261cfed85f86d2a2ef71d87a43a4ce745",
        1496860968, 0x01680000u },
    { 524160,
        "5f5b9df77cbf243e51d5e81b31c47c60f8e80cbe1601e110d0d1d9cf4e5ef312",
        1497142258, 0x02015b00u },
    { 526176,
        "115fb4e1bf4dc53bab06cde1c159d6595dde5793ab10433bf11aa15819995743",
        1497458406, 0x02015100u },
    { 528192,
        "2356d04660fd49566e274dff9e23cea91c4901764da0bf192310d4b1b5a45cb8",
        1497746399, 0x02011b00u },
    { 530208,
        "fc2933af72b2e791d21e775b7bbb6e080201b2eadc057bdd24aac8ac8723c465",
        1498014550, 0x0200c700u },
    { 532224,
        "c7206ceccbccdb72c198cd1b13c0b0ea7092820ae7d1e11ae10a5c88d563ca19",
        1498303768, 0x0200c900u },
    { 534240,
        "9b9b02e67e0ec5d12ba17e25196b7998c1a539c5bde7f59643aa804eaaca234e",
        1498571218, 0x0200e200u },
    { 536256,
        "9fc7363289eecd3523f6770d9f7a162342d8df9a527127155a0035409223339b",
        1498884938, 0x0200af00u },
    { 538272,
        "b42691f9c1d15a24c118df252797fcaf273be322defb439699a98e0117d5e354",
        1499227707, 0x02010300u },
    { 540288,
        "d1b929faf0b2bbfe997950a1829467472bbf90d992cddb359d1bbb608aa0f4f1",
        1499494049, 0x02010a00u },
    { 542304,
        "8131de640792447b6cff6f9cecad8fd695e13b67d8a523d99ae7b3bc7e192419",
        1499759536, 0x02015100u },
    { 544320,
        "c7c5385248552140baf2142710435a509e94bbff302046edb2738774d4536ab9",
        1500026370, 0x02014200u },
    { 546336,
        "2b9769ca0468460e744cca854933f7f03ce6289cec9d5b4e52147977d2e9fa32",
        1500288355, 0x02013f00u },
    { 548352,
        "faee510d6ab06ea74fdbb6fba786f4f5c13bb96460e0c7b6b7d361493d5abfea",
        1500581445, 0x02022300u },
    { 550368,
        "3737f42610b1b4ac6cb050175d03d0e57e6fedccc3ba815837af79ca816a2b6c",
        1500837342, 0x02012c00u },
    { 552384,
        "79ecca41c37329aa0ccbfd3bf9ce09eb0738de6fc0862ca6637c708be1af1c5e",
        1501115383, 0x02012c00u },
    { 554400,
        "be53b50885435b991e12b1b8120b1225f83b216ac84fbeb0e73f7e190c755870",
        1501371355, 0x02013100u },
    { 556416,
        "e09111f38dba759ac3b39b733e5033b07ffd401c07f9e01b498d0d042301a4f9",
        1501694774, 0x02030600u },
    { 558432,
        "929c4f3373e617559bac285aae49235dd6ff49834dcb12f09ca22ac95e705796",
        1501987680, 0x02012100u },
    { 560448,
        "56a322955f2fe8388893545227ab6a0727b029f6566904ececc7a3538ee687c7",
        1502255663, 0x0201ed00u },
    { 562464,
        "6ee88c05f3eff780955665e79d83ab2060cfe9e8ed68753129eb908396e9ea35",
        1502544948, 0x0201ed00u },
    { 564480,
        "77c5e593ad41ed281ee2e1b6495e63d1dc816c5653418f68b9a0cbc68f80783c",
        1502798415, 0x02021900u },
    { 566496,
        "ba98ad224e1893324c11586021a006738c008b516f3cfa9774c4131531d318e2",
        1503048386, 0x02026c00u },
    { 568512,
        "5a242ffe43be990c6a169e1a9f5a5f902f95c5e58a15340b647611003404fafd",
        1503305624, 0x02029900u },
    { 570528,
        "4b3988e167523398e82b203a5eb0c21f593119b58994446eeb873a53966c8134",
        1503566558, 0x02010b00u },
    { 572544,
        "33220831d50f40e155871356c7eb9e4342ee7d4dcf7daac399997d8e2ac23799",
        1503828992, 0x02029300u },
    { 574560,
        "84bbc6c09113ac5f683c107943bdc715b8115f2d0d1f861410a0f06883cacfd5",
        1504083577, 0x02020700u },
    { 576576,
        "9239979930e0899de77196ccd988f2331a6a4777a60dcae154c1611096dcc017",
        1504338951, 0x02024a00u },
    { 578592,
        "b7be052707b27211ae7add874eab305832672e593943f148cdf2e0fdca4867fb",
        1504612303, 0x0201a300u },
    { 580608,
        "e71e697bb410371cfe23164f16b17a9839fb2b87756438e70e81c29671047198",
        1504872959, 0x02016e00u },
    { 582624,
        "cc9645a671393568d52d064f8b3b92d0e70c8967606810c25e655786e1ec4547",
        1505136609, 0x0200ff00u },
    { 584640,
        "4dbd8462ba541687f2d7640549bb2146d3981a5cd67bb3c32e1046ce35b9d80a",
        1505392955, 0x02023700u },
    { 586656,
        "1d8f3db4f9094c3699041b269ee45e2e6a5dcfc88b7b5342f083bd88fc4a037a",
        1505644458, 0x02027100u },
    { 588672,
        "cfa00f12bb4bbc87358f21b77d4bbfcedfbacdac6c108228eac6b0d84ef594d3",
        1505900351, 0x02023300u },
    { 590688,
        "2cbf7ed6867370d46a2d36ee070794ef55671fdb06b1e02576cb8bcb1321ea79",
        1506160400, 0x02023d00u },
    { 592704,
        "f0ae332fe049cafce91e5c536620692ab8c1aaed17bde37523cf477a24ae6fed",
        1506434789, 0x02024900u },
    { 594720,
        "d935f1b3bb392a954faf024996d20820005d77f485b5f38f1655b96a55398072",
        1506688067, 0x02025800u },
    { 596736,
        "ea48d2b0b466f8f04228284369c6018a0be1788f86a2a3820d79f952400363e7",
        1506945783, 0x0203d400u },
    { 598752,
        "007aa7f2a1627e890365951a5c201bd15842970761504782c6a8d93022cc1e9a",
        1507207488, 0x0202f000u },
    { 600768,
        "63a56a052d1a244420a9916532cea50117469eef4d53fa6f94f09c6668336639",
        1507465431, 0x0202c900u },
    { 602784,
        "29ea2d8d53884f8271e2babec1da3b07f6963a7a36acaabff0bffac5b2694334",
        1507724287, 0x0202f500u },
    { 604800,
        "f470df09cfcac254aaed2e3b9aae499ce532180e7a70a06a640ef57b059f6a65",
        1508032503, 0x02014c00u },
    { 606816,
        "45f1470aab19119ba1be8dd62e23c831273f1bd35fa8ef8b5c682723618d1e7b",
        1508352273, 0x02023800u },
    { 608832,
        "86c893c29725d2d256a49c0081a024ed5abff092b4dce63fe8eab6b41d034ee1",
        1508631837, 0x02027e00u },
    { 610848,
        "7bcc7764bb07308aaa95afb89e4032bab82fba0d289599da457940a768b965c0",
        1508937280, 0x0202e700u },
    { 612864,
        "bb35c25dca4d7f26a176442c6cd62b90d022c35adee2758e0494bc36d9a1466a",
        1509313359, 0x02015c00u },
    { 614880,
        "b9cc736bc7640e8aacccc17e5bafc9952631e8c699212f1da02299eae7cb7fb0",
        1509682581, 0x0202ff00u },
    { 616896,
        "2d5aff906702889fb765129e98308e739e607804ca92920184b987653b59e872",
        1509966621, 0x02036500u },
    { 618912,
        "c4b64950920695e2f6c0796e77f82d84c48b2c7cfc1658439ba4820e128443e4",
        1510271529, 0x02049a00u },
    { 620928,
        "cf70c45911a14bcffd628d68893a54e4cfcf747c6b997fdde39eda60bc92a687",
        1510572608, 0x0202b700u },
    { 622944,
        "dbbb36e57466b7573886cecfee51a84faea5785a8e78c90c03095ea4424ecec1",
        1510831630, 0x02036e00u },
    { 624960,
        "dfbd3cd0ab03f6b53df6ee115c3760ac3a783e6e71df079f99f4902d716b326f",
        1511099870, 0x0203d800u },
    { 626976,
        "c9ad69db3109d8cbd11c9639b691669c3ffc95d229e164b429ee61f73ab6d902",
        1511385249, 0x0203ae00u },
    { 628992,
        "93013721c48b338377f0ecb887d49ed43b48c0ebc540522ffc74f563a05c45b6",
        1511651206, 0x02033d00u },
    { 631008,
        "a9d8899635d51692ec1462672f6451f260b4a6affc55a2cf6f0bd8da531eb853",
        1511907689, 0x0203cd00u },
    { 633024,
        "0c0fbd56d8ebe10ca195120318a892116785ff8dbaf0402976a3f0b576a679c9",
        1512186609, 0x02044a00u },
    { 635040,
        "c90a640c88bd8a1c38ea4f40cb345c3dc720c5f96da13ce80481a5cb65f9c1c9",
        1512457261, 0x02046d00u },
    { 637056,
        "30085e9c31be4e6cabf441e777cabba02ca02b0764d695ca1bcb9dbf217de6bc",
        1512718848, 0x02040d00u },
    { 639072,
        "2fca645b05b6e121f351e1bc68ae827c79e3ed45a5f165fb070539ebd5356a99",
        1512994379, 0x02024100u },
    { 641088,
        "c4d1a54a7575994a468297fc774715346f280ec493757d15dbe775a85537e961",
        1513262107, 0x0201fd00u },
    { 643104,
        "96b1393d249af0582dfb13a2f4818b072839bcfdce1fdd13a874dc9edfcb5936",
        1513523793, 0x02024b00u },
    { 645120,
        "56144c684f57644cae3524ed895bde868af0806c709fab049e88c867b65dcefc",
        1513889784, 0x0200d400u },
    { 647136,
        "2b6a69fffb4fd13ec5333100fe146f16b68aea267e488537f07f57c7d0d459c5",
        1514200060, 0x02017f00u },
    { 649152,
        "15996b210fb27e9b48de80c6cc8120688650d84550d6275dadf0435d8f8733c3",
        1514484285, 0x02026500u },
    { 651168,
        "51350a8ebaf768fcc59c9bbe7a045c42f65dda39d3f4ff150db32dbb866fb2d3",
        1514758767, 0x0202f700u },
    { 653184,
        "bd63538c127c5777903dc48a58f1c73d1eb14cc775e0822c2e678f2487a804a0",
        1515044293, 0x02038f00u },
    { 655200,
        "f45981cfda9729789ae3f89d14e90d0973a184ec9aca4d4c28824722b7a28918",
        1515306980, 0x0202e200u },
    { 657216,
        "305dfa5ebf94c861e20a7908dca65c17bf7397691226ed3c831deb886be4e5b9",
        1515624969, 0x02030500u },
    { 659232,
        "718fcd1e46b805400664c8b40fe212dc742478bc7f6f1364fe92f75d7a699e05",
        1515909479, 0x0201cb00u },
    { 661248,
        "284ec40adf3b4e652fba52eba5141b383a4e23bd46c350866e7c782960b1b312",
        1516191313, 0x02033700u },
    { 663264,
        "49f2182b9a15c66d58f0aedfb4f7f246e61a8df316037ebafea7206d9059bd85",
        1516479500, 0x02030b00u },
    { 665280,
        "fe5bc48df7151bd57b825e48ec86089aa4b8142074e3195b50dc7d163e66f186",
        1516822735, 0x02019800u },
    { 667296,
        "44bf3743b788f4e7d97c56c56cda6cfa3adac5c6ed7325c9eda7ae51f3796136",
        1517116304, 0x0205bd00u },
    { 669312,
        "89304411cbfb106feb90a1c833dc5a5ef31b60151100baf3c6ad32f5a14ea9c8",
        1517442210, 0x0202b000u },
    { 671328,
        "34f330ad64060e8c885191c1e7c1519014fee7c5596d4b3577f734f174033fdf",
        1517728176, 0x02030e00u },
    { 673344,
        "a6bfff98ab13e066e3370b807121ff8d693235f007165411700bb34743e51f05",
        1518106233, 0x0201a600u },
    { 675360,
        "b8a9c98fafd30c9e1a39170572775e107eefa19df1f22b7d8893c617ff6ab38b",
        1518386006, 0x02030100u },
    { 677376,
        "0c632a1d4b3b526b5bb870f141dbedc6b1b79cbd336e0d84ae98b740aa2c7578",
        1518652582, 0x02023000u },
    { 679392,
        "f955a375d5f026125444f935df54d7984b30d0c5ba63f18eb752920b8268555d",
        1518925450, 0x02015c00u },
    { 681408,
        "dfa71adee3b6baaa4ad4d828b783015c3b8c3b2c1d9d30243e3f0583bcfe4656",
        1519219493, 0x02030000u },
    { 683424,
        "619c0d54d5ab5c2d9f756516f8c9f902153235c06de3e2db293d85a2e1d630a4",
        1519512172, 0x02021400u },
    { 685440,
        "c0d3c44858997e14557db136018325f0f29db19dbe44a4c985d2ff746a972244",
        1519898114, 0x02036d00u },
    { 687456,
        "e875d794c48e53fcab6a05807e50aaadabf0d3bb10b810a13461be66d52380a2",
        1520214143, 0x0201a100u },
    { 689472,
        "5b2e4b5d6d882b6edbf39419cbf33dce320daf7865ebeb1be98ee633ee3cd1be",
        1520496519, 0x02034600u },
    { 691488,
        "a91b7b41022bb8aa65ec4faa9e1c843cb4934d4335ab42e43e49d413fc21a02d",
        1520779448, 0x02054900u },
    { 693504,
        "e8dfccbf9cdbe90e828ca1ed2f7915495acf571b7825d6ff1f3b3285cdbb33ae",
        1521060838, 0x0203f400u },
    { 695520,
        "5f438313e36bdafff40beb99fac467325c66cabbb0fba3825cc71b5ef5fa0b35",
        1521349513, 0x02023600u },
    { 697536,
        "c9634346c3da591646241b333634f5c4a50f00d8c52e5e3cb290359962b5332c",
        1521639920, 0x0203de00u },
    { 699552,
        "b0751c9906be61cefbec5454e215bd565cb2fc072af0b1cbcd1f4e01b5a6d237",
        1521930191, 0x02088400u },
    { 701568,
        "5df47d1ea1c4c22a03247ab4ea8a73c7d7818f07f47ed8f300ddeb7a96ec8434",
        1522262950, 0x0204b900u },
    { 703584,
        "23dc024b22f7b67647558f49b5e6f4abf79a84a18de30a59299a73c88d7781fd",
        1522568655, 0x02028900u },
    { 705600,
        "b130e5f315bab9f52fce7d53945e2f929714ed35bef70d0dfdc0d6d1b9c49bfc",
        1522854167, 0x02041100u },
    { 707616,
        "e7598111496311adeb1e530d2584d00fcc34eddef08802ef031674916c277d41",
        1523106527, 0x02043e00u },
    { 709632,
        "cab0293fae516c9fc39e1ecee2dea83414649ed032affe5754866c5e2d42970c",
        1523376855, 0x02044400u },
    { 711648,
        "ef82faa9fe212e3fbebad899b0b19b10d94c6ff48c55bbabe2dcb86d5b5a9702",
        1523647395, 0x02045600u },
    { 713664,
        "d23ef2cb00f5e405f03f2f8fbe39cee42dde53fe39933302d68025f83a5d3662",
        1523914955, 0x02027a00u },
    { 715680,
        "6b13e6725434f90e62a140682b35b330557dd7d35264e00c5db9b54b2bdb8e55",
        1524202255, 0x0205b400u },
    { 717696,
        "aeae9f052a2e5335c2bc749c343cd89eadf798b219ecbfe4850bc2e6f8d131fc",
        1524476806, 0x0204e900u },
    { 719712,
        "c5ff8ec2b1c69ad4a82eba5f39c406ddf8da975c829175cf26242bd6e1c8880f",
        1524746935, 0x0206c600u },
    { 721728,
        "a4f6deeeabda94d8c7ccb7d4e6123ef9333d82da52c52a02aafed4e0868e308b",
        1525015946, 0x0203e900u },
    { 723744,
        "cdc327ec3f1a168548fa55840045e817c8af74c2b824438fcd0742067bdb3680",
        1525271394, 0x0202ed00u },
    { 725760,
        "7eee0078d3ab324a5e929cc7c75edb5446fed3c015dcca86a70e443be9fcff8f",
        1525534196, 0x02037c00u },
    { 727776,
        "1dc03b2cc6d289e95e00bba170fb9dd06dabc637f8dfe881011211f20b2891cc",
        1525791823, 0x0203a800u },
    { 729792,
        "4c13ef8f3418feb44e0d2ebe1d18a3e722e342992cbab6f3f67b7da512f365da",
        1526048081, 0x0202a100u },
    { 731808,
        "e3b66a465cc59a34e60104f0184dbb1b8be3c0773702920d149a4b24aa198710",
        1526305926, 0x02045c00u },
    { 733824,
        "f360c9897fdb2a77ffd647dbec7d50b771e5e9f34276786f1c4a0803cf8d9ac0",
        1526578289, 0x0202cd00u },
    { 735840,
        "d195682e9849a47eb24ec8aaa7a388becb6a20310f7c7a5a18b241c0c793c58a",
        1526850401, 0x0201e100u },
    { 737856,
        "0f1ab0f12d6e78cdc67546b6ec10bad72ca9cca441b3714294703d82669efc65",
        1527110016, 0x0202fa00u },
    { 739872,
        "bd2d16c0610e6600011d94b8b8403cc6622c74b4741a8a3a47e0695a23394198",
        1527385294, 0x02021800u },
    { 741888,
        "6ceb397043868fdccec860425e55095411ccb6851943cae1f313244233b561c1",
        1527657683, 0x0202bf00u },
    { 743904,
        "42813ed7b6b8470eed82b53b4c69449b5a21345256267d11e1f44c406f84f5da",
        1527926344, 0x0202f400u },
    { 745920,
        "00527689a32a3ba9ecf4cf3ba9dc86c6d57757c4416e9931e45d997da561cd42",
        1528239116, 0x02012600u },
    { 747936,
        "adc6b66542e003aea2bf0615f6dc439da5f89d68e877dd93043f8c8da3063635",
        1528501971, 0x02027700u },
    { 749952,
        "bd1f05f83d551c91a9b6a344392c5db01de48f9b0f71dc75ab67f062cb5c6715",
        1528765495, 0x02042c00u },
    { 751968,
        "5a721c55b4cfab8d32bd2ae5e6fb23fd16181b0e3218e355bb13a18675fc60c9",
        1529039601, 0x0202e900u },
    { 753984,
        "9e43db4993728c290af2a178f71f482817782aa0707bc5d43cb960b689f2cb82",
        1529331506, 0x02027b00u },
    { 756000,
        "ea19896f213c76373eac9c9ca4f99661f3cf743f9cf5bfb1a9cdcfe7fcf83339",
        1529594272, 0x02037500u },
    { 758016,
        "086108f0965adb5506f33d12127e97ab5e929806d5805c3897ec41ca7649b393",
        1529859127, 0x02038f00u },
    { 760032,
        "254085ae32b994c509c61ce4b78deab76f398924b5fc7e79b37525571e724c6a",
        1530129602, 0x0201fe00u },
    { 762048,
        "d87914e90828e465f6784bc0045c5ec646ffb4a4336131421cdff3d4525130f9",
        1530403986, 0x0200cc00u },
    { 764064,
        "704fc02e5a1b47607f3a3321c523b5c5e049d0df31348d3cf7a4def09b17cdc9",
        1530665656, 0x0202de00u },
    { 766080,
        "592b23e4566604372a4a0773e431796e188079cd466b65f97504cb4db9686623",
        1530936194, 0x0202fa00u },
    { 768096,
        "e9df61d74bab6cbe9d5c5a605d9d35538d385e7db9f328565685c34ac27b4707",
        1531193019, 0x02027200u },
    { 770112,
        "d69890cb50b912008112fed8f7e6f3f292ff735909c3a7d849702254c8678219",
        1531456241, 0x0203ba00u },
    { 772128,
        "22f8da023fbe1ce4a423eea5f694d8d47f992a15e1cdd1d68bca7760279d0b98",
        1531724236, 0x0201a000u },
    { 774144,
        "7ab91336d25043cd783b0b86dc31e982593df3e87ee93377e58f7830cd649abd",
        1531995325, 0x02032f00u },
    { 776160,
        "7acdacb9909557dda6754408387b38d0b242a3921ccec2285bcf20722bc190df",
        1532276117, 0x0203d800u },
    { 778176,
        "b7e26645886ec063099bad0fbccd5a3dac0a0de5d930f776ad0b7f948854d91a",
        1532559465, 0x0202b800u },
    { 780192,
        "8b2cda6a5e9203c5a37ae4d0449ce5e643c6af1511ab23217e35af831f2e57e0",
        1532833868, 0x02016700u },
    { 782208,
        "06d3803a877d3dbfa028efc0077e12a7083fad7c89d0c0dc1a2cc119ac8e307f",
        1533124219, 0x0201dd00u },
    { 784224,
        "04c932efb3c0ebd0d00d54cd6a91a2f27dad663fb438b7bb3739748167965cfe",
        1533401774, 0x0201eb00u },
    { 786240,
        "4d5206b826dcd5321e037d727a2b73ca9119c006b1ab528f2301a26277fa57de",
        1533660523, 0x02024f00u },
    { 788256,
        "0d621289ee5e0f713908dcdb5184069a520d4c5d05fbe5634d04126353beba08",
        1533926253, 0x02042900u },
    { 790272,
        "f1d2899b32d0df5352c0273770e07f4147ba9312ef33844e83f448acfa4e53ec",
        1534186796, 0x02027600u },
    { 792288,
        "c1ae0a7555a3b8ed9dd98dc6f7431ac5586ca77bf42e054bc012272f232ce17d",
        1534453070, 0x0203d400u },
    { 794304,
        "4f655ffd9a9d148bb5d21ca7757bf077d58bc201ace7277d69d658450d41c659",
        1534721737, 0x0203d300u },
    { 796320,
        "53b826f211896bd5ae48137a2c6bff5c5fc014b56e17c6d6d41ae322d7105f1b",
        1534981465, 0x0202eb00u },
    { 798336,
        "debd23691bf8c0c8c9629c16c3cb1cb02775c30d91b7512b6ac1f87a7a8ad1b7",
        1535254720, 0x02012e00u },
    { 800352,
        "ed1b589c44754f336685c54c1879b1fbe1002ecd84e381f1da8993c8f8236a09",
        1535532255, 0x02018d00u },
    { 802368,
        "2795ed630014e676f8f134f0ac4e796dbc6bc53d35eb29b5aed6e26fb8554d36",
        1535846102, 0x02019400u },
    { 804384,
        "06a8d71fe87adcc824f3038ae11dd68edb1aac316209ba45475cbcd25af68db0",
        1536177774, 0x02011a00u },
    { 806400,
        "225a566aebacde8942a281bdd9917f6f9593688768e70c2abc3105f9530a789c",
        1536466350, 0x0200b000u },
    { 808416,
        "d337a06844d1ce4c2e4fb897d70fd6fa9e1d26b0900c4665c922bdb89c8d268a",
        1536725477, 0x0200d200u },
    { 810432,
        "6080af5fb59ad6ecf50b1e2fd83d199f43cbc7e7d7375ba6536b67d657d102aa",
        1536973673, 0x0201ad00u },
    { 812448,
        "73bbc81c320f1a9ea83d5bc87af86db8203608e643648bb403259d268a352f5d",
        1537230289, 0x02017f00u },
    { 814464,
        "e05fd6527d3daabf7ea957b204af121f25a2229ba577d967ff58385f6b37558d",
        1537490801, 0x0201fd00u },
    { 816480,
        "589061610eec9ef27476c1184cecdb5d407fc691c51c9b7f6befdeaa9a1a3cd9",
        1537750812, 0x0203dc00u },
    { 818496,
        "86b2ade82768f37b613ad30ce95ef3440b21615de2eafaf3599ed8ecc1d520b9",
        1538012865, 0x02016300u },
    { 820512,
        "f8564480cdf16f0279432607db5ee09fa547c1f1d0c8be516d5a9656a7576eab",
        1538275017, 0x02032700u },
    { 822528,
        "117070e4d414c953d008e4c38140e50eff216a81cd1832a2838e1a07e9045fb4",
        1538538413, 0x02039800u },
    { 824544,
        "fce20cf9827a9ddd90ed774b644d9054f8cc44e8e5bb0e19f3c4d133b6ab5f38",
        1538800767, 0x02020c00u },
    { 826560,
        "a63cc049561ee9bd14d8d3408b186c102730a67f4094aa91496a0b38a61f99e6",
        1539064733, 0x0203e100u },
    { 828576,
        "6128e7472fde722a45483d55c82989a41ab9a502b7fa4a782f4b7007de8ad6f1",
        1539322241, 0x02034600u },
    { 830592,
        "7a79581b88b21c890e88bf1db741233cf234ae9837a7b4f675957d049070518a",
        1539587322, 0x02032500u },
    { 832608,
        "b9cb5ee77d3e8ae6c8f3974cb5136b5a30342a87cf898022b2039aa6e2139eec",
        1539843297, 0x0203a900u },
    { 834624,
        "8d3d232ef57f160cbd6fb21bc975a88eeb02c9f815134b49c91740550f920d93",
        1540107395, 0x02021600u },
    { 836640,
        "dfbdf6550fc5978b03808df164b7076c9b27b2f8b03d6389c977dd3341918ea8",
        1540376155, 0x0202a400u },
    { 838656,
        "44b63c28e65f4cdf473f4abd7ff8998d6a7dab5d6f1249b6f7ad7cb7898626f9",
        1540634132, 0x0201bf00u },
    { 840672,
        "725be4cf5b9c13d3a5494e7b49dafb8e6e804d14019191fddb781a947008d3d0",
        1540890467, 0x02029800u },
    { 842688,
        "ea2e78de7c464cee769eb0d73886ef32734031a0fed75ad20dde8195218e395f",
        1541161798, 0x0201b800u },
    { 844704,
        "c4bb9aa5dce009f47db0d59ea749cc5b20290ee4db109bddee7ad68d22fb1de0",
        1541428365, 0x0202a600u },
    { 846720,
        "73fb5d75ee526e29232db0e1953cc0d313902a90b8183ea9730d3e50f4882b1e",
        1541696818, 0x02033000u },
    { 848736,
        "88d4073e68668b329078b1f4f90b89c2dbdbfb03430080487047ddb2a89037e7",
        1541948762, 0x02030000u },
    { 850752,
        "db33bf9481eb5cd5fd17feea90b231c9503767d1fc4a052bc7885dbf44bce755",
        1542207319, 0x02028700u },
    { 852768,
        "0526780e234b8f4950e032210ccc5df1a44ff1841fcdbeddbe5e07d4c540a25f",
        1542464059, 0x02034500u },
    { 854784,
        "f1bdaf7ee4bf725369610b4fc2b2db4adcecf24b587e956b0d8c802b58a56713",
        1542723449, 0x0202b400u },
    { 856800,
        "49c74382498b80aa0f0010ebd610fade3aa86e1493355e79262d4abb4b89764d",
        1542982492, 0x0202e000u },
    { 858816,
        "d8cdd6ba906bdedb8d3352ce8ea65595d63eedae1d61246b581dbe93789c959d",
        1543242825, 0x02029e00u },
    { 860832,
        "cb0008727edf96009955458e87096743fe9e1a8fa452411ffb8b066c1436c7f0",
        1543490000, 0x02035a00u },
    { 862848,
        "bf840cbab872afc5c1d5e71a52df4f9f86fa8680372a3e561a531eb1b75e7a00",
        1543744910, 0x02019100u },
    { 864864,
        "3c0796b281a34519932f491943c35167de62991d849efdbb0341e08857575181",
        1543991782, 0x0205c100u },
    { 866880,
        "866e9523b18cf7196978266805aabdb06d9929829ab02ba32357fa8716f45cb4",
        1544238588, 0x02052b00u },
    { 868896,
        "93206801a054cf163a6821112a1b0984cf68c59a39dd07b68144dba83eab4be2",
        1544492752, 0x02045100u },
    { 870912,
        "d89a054c572843df9d72fbfd93a3913bb458a03e161a05e57146da556b7f31c0",
        1544746494, 0x0203e900u },
    { 872928,
        "36aca32c423b56344681faad1f61acc0d85c54081b202998ccbb4b5132a66a5a",
        1544998128, 0x02034e00u },
    { 874944,
        "6eda102688ad411d01a29bcaff3b6629a3ee41d2bc79ab5f95cede7961191048",
        1545254868, 0x02034600u },
    { 876960,
        "dc3f8eb74ae8705faf4ccd98bd83a7bec6b47bac99461474b28336955247256a",
        1545510048, 0x02035a00u },
    { 878976,
        "c367746a9bfa5839173e541b1c7ab94dbf9586a4d2eef2cc786503c93a6b27c8",
        1545757088, 0x02048400u },
    { 880992,
        "8db83cd035715d09dc9bb4afee0d9bbc5e521b6fe01d2df4c4c01877968b9518",
        1546018389, 0x0202ba00u },
    { 883008,
        "03697840e2d1781c62f910dd433691c620b5e1acfe3db8c17b386f48515b9a2f",
        1546266158, 0x02028100u },
    { 885024,
        "14dbeb88de2c3341f05413ec4ea724ceaf008f185e16f505c7fc28e0f1b1643d",
        1546517722, 0x02031f00u },
    { 887040,
        "7304fd0890d47cefca8d6e886c391c74eb501bd64c2b9ae94b7492c3e601d9a3",
        1546771128, 0x0202be00u },
    { 889056,
        "e25b816372cf0c8e9aa92c6f8fd720db8a2a008b388063166d4a536c5134471f",
        1547022103, 0x02032700u },
    { 891072,
        "d3a80066ddb0ae8dea016646cb8ed8eeafe16176b12c00502ad44a761c894c78",
        1547273980, 0x02030600u },
    { 893088,
        "36c0ada0c96ed648ae3b2174f8840c097a12116f479fc14f3b84af523ae86be7",
        1547523409, 0x02027000u },
    { 895104,
        "974dcd8d6944a2d5390f1cde1109426627f8068dad957ee433cd9842a6ac69ba",
        1547777463, 0x0202b900u },
    { 897120,
        "5653babece50a9758cd19cf7652bdfe3a251f4c1788c1d2fe04a2de4f3eb6736",
        1548031050, 0x02036700u },
    { 899136,
        "39f85c3179ecb9e19e2c015c91e0c3700ecf01aa2c27ff4d2cf498b8235dad52",
        1548294587, 0x0201e900u },
    { 901152,
        "3ba08a72ffd867e11352d25e94b15e36da11effb03592b121dbda732268d5bbc",
        1548570612, 0x02010b00u },
    { 903168,
        "044df78be969ad94673a3f5bf0f7e3555d98d3e4518e8edb3e55cf9993d66ec4",
        1548855376, 0x0201d400u },
    { 905184,
        "ae7497191819526a6682de3fc35606954a050c5adee508eff5c20f09bf13741c",
        1549163950, 0x02015b00u },
    { 907200,
        "acc14952578d8cddd4ef7bb053096c0c6fed1628e1d17a805059200773bbbe9b",
        1549473403, 0x0201fb00u },
    { 909216,
        "f3680b2c27c5e8ebe74e47096e3b11bd8eb4d560b2446bd30576d7cab787fdb7",
        1549776133, 0x0201b800u },
    { 911232,
        "c22eb48e33c8a1fd9952fb64d277bab947d6cd91a99a4ea1ac07932ac5a0917a",
        1550038928, 0x0200f900u },
    { 913248,
        "86fad9467c4214290579c61a7060f6629b30a45e8020df3d61ad5a6d6e4aebe6",
        1550322998, 0x02009e00u },
    { 915264,
        "a27fccdb0021209c877ca91df1b960bcde210f7abc86865a0e2607c8ee457afe",
        1550577215, 0x0200fc00u },
    { 917280,
        "eee9f60121ecd265f60113e0a88c8a1cb534a72d9d15f3a1ffa9bf4defca57d4",
        1550899802, 0x0200cb00u },
    { 919296,
        "82683fcb7d2829375d20043d16cadf208552b3188af2db73512e6d10d12c2585",
        1551273330, 0x02011200u },
    { 921312,
        "810ddcacd848d09eb242126dfc4fc3dcf7df0b37f9947e210149b44744dbac6a",
        1551616377, 0x015b0000u },
    { 923328,
        "f5f48b6f09eb4cdb837bea8fbef0f4e3e6060893e0ade59e9d880e587d346f3f",
        1551917371, 0x0200f900u },
    { 925344,
        "dc49300d8ea64a6165305cbabfcd996923af4c099b9f12a333c6b7daf9a29cc8",
        1552167852, 0x0200d200u },
    { 927360,
        "4b3c5b35805b5263ebc1ed4df1f92f73d8ae8bfe57d71a7665bd80b055232c26",
        1552418756, 0x0200b300u },
    { 929376,
        "c4f5dedaf771b2fe40d3e53048dd949f88dd69617d1d8e56e98aa0b6fbfee446",
        1552670676, 0x0200bf00u },
    { 931392,
        "6eecfd86809567512301febca6cd5bc5a47e549b247ec750f957f6fbe63e46fc",
        1552920306, 0x0200c700u },
    { 933408,
        "bcbbf3b6f3fa8a4cd8701f4448896e35a0af5235b961d8d4c450f002144964c1",
        1553195464, 0x0200c400u },
    { 935424,
        "c0a0cfea5cd794e22f1614c3ab51646406da6f06bd69c72e17dff9f1dfe782b3",
        1553450425, 0x02009e00u },
    { 937440,
        "f87597c82643384a7bca80d3870238ba75f280745738c361f7f3eacf5b0e2e94",
        1553700204, 0x0200da00u },
    { 939456,
        "16d89fffa206a68865a381a564b705f2ef58412404d846521b10e943bd848250",
        1553956081, 0x02008300u },
    { 941472,
        "c7e52bf1e042cb0b7f6698e15a7fa32fdbfbdd7002f0dcb642969a3fdb5ddfcc",
        1554212418, 0x0200c900u },
    { 943488,
        "4371ac2037f2cb96eab3f284dcfe973e12be7e481b941a085394358a94e07dc7",
        1554467777, 0x0200ac00u },
    { 945504,
        "1e1d9d6a91e8cbafd8223f7b1400295076713434651f1c7983cc5291098774dd",
        1554724069, 0x015d0000u },
    { 947520,
        "8c4d0aa1a4b051c5b1cc6191ae963249dde23464d3a5a29e46e03b0e660c6fef",
        1554980935, 0x0200b000u },
    { 949536,
        "0f08448661b44b94145b57f749d8dcc815e14ccb19322e26b8c72b40be66a572",
        1555260977, 0x02009200u },
    { 951552,
        "56f16c737b48b2f54243c37657df2b2fa91afaa320f22b970ece7ac3a7973598",
        1555613135, 0x02009500u },
    { 953568,
        "5538d0d7b369aa711116404e16018c39d990d4f550301070d89ee156f9035119",
        1555872224, 0x0200a200u },
    { 955584,
        "e73afc0b66be1890cb74b2eba24a603360473ccbc64ef3270173f6f5a52509da",
        1556213716, 0x01140000u },
    { 957600,
        "92ba0875e45686c91bf17c6c1b34d4913fb6894ece884cd2602d667a4db40777",
        1556464231, 0x01420000u },
    { 959616,
        "39d22aadc15dd7047ba1946d791af3e1b5ab2ac1e65574d265c777f9047bdf10",
        1556714484, 0x015c0000u },
    { 961632,
        "d971e3f6e2609da979704aec13b0289e0b81325612ced51984a6fef510b1637d",
        1556987348, 0x02008500u },
    { 963648,
        "35863d9eedf220b20ed5cc209fa0e021582f82fc006fa46c1577e2e7e1179a89",
        1557260348, 0x0200cb00u },
    { 965664,
        "5a240705cf12ec3fdb1f5a64e71984ef737e1173ebe017b1c3f9861e7f0cad21",
        1557508086, 0x02062700u },
    { 967680,
        "fc8b3c0e2d319a46b26731efaabb549c597b62faf3c965127ff14e660734d33c",
        1557776693, 0x02060900u },
    { 969696,
        "8021096d7e15cd06049da1782d90cb1ca89adb0c772d9ffc8ad6160635362cc0",
        1558039731, 0x02061200u },
    { 971712,
        "012f29bb2acfb2f8f5e0c84931036b912563768df2aeb7610a6134434eac6873",
        1558292431, 0x0206ed00u },
    { 973728,
        "6b21ae3c0b64130af4790a0104e9689ff31957f43acaf563682f788c0a907520",
        1558544331, 0x02097a00u },
    { 975744,
        "53e45738fd44a38b9691def58f1045088b9ce3b1663a1619349934210987d7bb",
        1558793098, 0x02081400u },
    { 977760,
        "7585c1198c1544e4a4aa4cba8f7ddb842c83597dea3c0b7e85b86140a0dfe2a8",
        1559043305, 0x0209ed00u },
    { 979776,
        "6d4799bdfea559883e36732590cb0f5ca388b83c6c76683d8cb9bba6e8b2284d",
        1559300118, 0x02068300u },
    { 981792,
        "9c1544c1c73f820b9ff834457fdc0e662ad191cc419377d679088deb45108cf4",
        1559548788, 0x0207ac00u },
    { 983808,
        "830f8234be67dacb8d886b3e552fc887460c60ebb210f16df89dc727c6c84fd1",
        1559799406, 0x0209e800u },
    { 985824,
        "ca00af56957a85cbb14a2628ba9dd9ec6e1f1830aac0f2f3197a4a25a15350d8",
        1560051185, 0x0208ac00u },
    { 987840,
        "4aa650490ac7dc1efd570ebd1c59391b70d7b70647e18bdd66228cc2d1611445",
        1560304969, 0x020e5f00u },
    { 989856,
        "32d2a2febc411c0cdfb2d3ac05f8d9897c76e30ccb83490ad4f63dccaa63ef80",
        1560555602, 0x0212de00u },
    { 991872,
        "f222d67d787c09cf34307b50869b0127e03010d5fa0ae11a70dfd47f914f7fca",
        1560812608, 0x0210ce00u },
    { 993888,
        "37f3b3e8224f1ea308a59fc901ff9058fcc7a7d42d5ca58503c5efa59c0ebad9",
        1561061728, 0x02114600u },
    { 995904,
        "b7d98f39a34edb64623609b09cb19f579d2daab9a37a231f6d4100fbddebacd5",
        1561317405, 0x02102c00u },
    { 997920,
        "d9fc46dac36cc9212098dafda2af14dac17209a6f5aa499e65ae7e88fcd63580",
        1561570849, 0x020d2c00u },
    { 999936,
        "e0f197aeb2bfc143d7a5776d45ba33ae29dfdd1c887dc1fca475ed443ed41cb5",
        1561820666, 0x020e4500u },
    { 1001952,
        "328bed63389881f7028429169cd65cf01d03b0b16407ea652b6acca252b6cea0",
        1562072566, 0x020b4400u },
    { 1003968,
        "204f8dc91404b8940269bd972f68501833a98553448c11e8ec6e86a3c3bfbfc3",
        1562322754, 0x0210f600u },
    { 1005984,
        "1f128e9b344af314a20f53ad45fc3d8928cfbb0d12d4eff3098410182bb7d8f7",
        1562574589, 0x0208d800u },
    { 1008000,
        "e4ec0f8547e350cae494da0911b79c70bdc10199a70e952ab925b96fa1527369",
        1562830300, 0x020cf400u },
    { 1010016,
        "5125ff210731d49b6a4a7f554d0b064c6ab2da9b340606c522857d96548aab24",
        1563086203, 0x020cc600u },
    { 1012032,
        "f0f95a88ff421679c211966b21d795ab4665c7d7460961ed634a00a119a10618",
        1563341878, 0x020ab700u },
    { 1014048,
        "b67bf15bec4231e8fadf2d9e962e21990a08f871d084fdce3c0c353015d8d501",
        1563597168, 0x0208e000u },
    { 1016064,
        "6e77eca6a66481965d967d35edce7d6e5f32deba6b2e922a6d3c6f422c9650a8",
        1563858404, 0x0214a200u },
    { 1018080,
        "19a5bce409b305f1d16ee2a2cc7911e74b16e636dce5f00ad897ecbf65c4f197",
        1564124125, 0x0213f300u },
    { 1020096,
        "eadeaa624c5cce6a65609f1186e44076dde42dc59957287649fa7121dc24a3b6",
        1564398852, 0x02132300u },
    { 1022112,
        "88689bb7cf7b5d3e58a045033c0887851ca61128ba4350e2745951bae9c1d6e4",
        1564669182, 0x020bc000u },
    { 1024128,
        "8714f8b1c877646b8fdfc1f78730a9f0be84c91e350ef0652d80a8f5aaeb3028",
        1564927511, 0x020ef000u },
    { 1026144,
        "657ede935c6de6d381eca79f12d5dc4acbad00ae062d9338a890ba534fec9084",
        1565180834, 0x0211be00u },
    { 1028160,
        "4cbe34f9feb42d4d2d527f6302ff70aef247d8e918583bcdf263ad1ac7761111",
        1565438229, 0x021d6300u },
    { 1030176,
        "e336e537db21b9315faa85a12f751ebab2503880e2fc57ae87a89d2968d9591a",
        1565696008, 0x0212ee00u },
    { 1032192,
        "0d0a7ae7820b6fc6356dcf5be1431dfdbd43fad9294f6990ce6d4f7b04b983eb",
        1565959581, 0x0217bd00u },
    { 1034208,
        "6d3f1f5a15a61cdbd55870c27cd75e235114b9ad6f8b6baae116f9de600788e5",
        1566218681, 0x021a4a00u },
    { 1036224,
        "cf0d526b51e9ff400e5e000b18781803b9b149919775aedab078a6e5587af006",
        1566478122, 0x02132000u },
    { 1038240,
        "a71ab725183a51fbeb7013f34f9251710eb8b02e2d7e34db5ee8c3abf49fea5a",
        1566732908, 0x020adf00u },
    { 1040256,
        "cf552c8acd4a7c6768bffb69e0873c2984629de9376e0ccfd2adc269bd840db3",
        1566983803, 0x020f3d00u },
    { 1042272,
        "1e289a31739b1893d43ed2af7d117a12070fde3851258b481d7ad69437054fe2",
        1567237579, 0x020b6a00u },
    { 1044288,
        "248a9092b93a7b5aef86a849c62765c315f2634fc3782b2630568baf50c40244",
        1567486065, 0x020a8200u },
    { 1046304,
        "992839358a9f3b460ed11192bb43dbd80cf669347c441636abbc6e4eb6b438b9",
        1567737813, 0x020e4b00u },
    { 1048320,
        "f3acc4b61574aa1bb506d165e228012719e77b28ae138c91a7ee0bff671354a7",
        1567988042, 0x020a4b00u },
    { 1050336,
        "3468c4e5c96b38026ed1e97617a627aa4b6f7f2209d2e6b797a75412c0acd5da",
        1568244419, 0x02091100u },
    { 1052352,
        "d11709cf989f857f752732d125d4e06099531291ee055cb06e295d12a345525d",
        1568505133, 0x02031100u },
    { 1054368,
        "513adc51d0af41bffd733af1ad39a525e7ab63a387e09afad6eb1cb5cb477921",
        1568751131, 0x02088b00u },
    { 1056384,
        "0f1e5304dcc58371c979a62103ab746a3a3dd206af9ee96f07547cd980921109",
        1569002092, 0x0207c400u },
    { 1058400,
        "8ec0cffb772136e5105c1d0657785552d123f80b879573b31cd3af39d3233150",
        1569252742, 0x020b6c00u },
    { 1060416,
        "7025f53d7a3af0c8aa49af31e714104a55cd49bb7f50f1612d11897e9783d98f",
        1569505230, 0x0208ce00u },
    { 1062432,
        "cc515b1d83f52c71f3ee8bb8008ae2a9e6b23ee732dcfc18b5e752c305df73ca",
        1569757690, 0x0213dd00u },
    { 1064448,
        "6b98401cf2acc720f1d900329822ee2edafd0de380caf8e946fb569addb17b9e",
        1570013875, 0x0211a400u },
    { 1066464,
        "cd16bf19e1c984b610c399024448c4f5efd425f0af9d59632bb50dd1cc9760c7",
        1570284921, 0x02118200u },
    { 1068480,
        "3858b3679f3372e09d85ef57a5eae44fb968f444464c727cd264db2982d68a99",
        1570544603, 0x020f8200u },
    { 1070496,
        "5226f4a6555162316d5d2e433b31aa80d13b28da53162a791d50de7abec56a0a",
        1570791805, 0x021cc000u },
    { 1072512,
        "b0a0392ec653de013a0433ee5429ef6503c96bd14952e461d7bb726fca1f8e50",
        1571053004, 0x02147500u },
    { 1074528,
        "01e390026af6350cf1a24c0012e753e571057fe359d2547e5ddc236081f3a28d",
        1571307710, 0x020d0c00u },
    { 1076544,
        "b0822e89761cc0c7c86c6996e9e2309f3e4494ff03ca88d9e48df495a3601c30",
        1571558279, 0x0215ba00u },
    { 1078560,
        "810b7c38c9f147632da7392182d1723c2fc163764da3d7b3abc1bae175277be8",
        1571812168, 0x021b9100u },
    { 1080576,
        "b9f396dfb3d1295325957b878e704b377f967d26ac5d41ea536e0c4c1b40b43d",
        1572070177, 0x0225a300u },
    { 1082592,
        "d2a6543aea8e06d2f603d1066b2b8af308dc96e03f6985a081cb8ef67612adf0",
        1572324245, 0x020f3900u },
    { 1084608,
        "cf3b3b6ef6fffe692b94e6b3a0f278646ea64998cb79e7fbd5c12181f42db353",
        1572576842, 0x021a7f00u },
    { 1086624,
        "c74e3fbeba09bea9d255eae9db683e615d5e1fae2b93a7b232cc2e6d85e3f98f",
        1572825332, 0x020f1900u },
    { 1088640,
        "8ba69a3be4ac5312b17e6b8ef0188980c09403cf09d672a5e523370485270b85",
        1573081511, 0x0210e200u },
    { 1090656,
        "e8d76272a4f5485bffe88859749116f26160cc346bd0c67340e791c418c53b4a",
        1573334323, 0x020c1800u },
    { 1092672,
        "fc3bf99853aa488e6bbf3c3ca266096d3eea9490bc429bed8f6c012b67f2956b",
        1573582577, 0x0212f700u },
    { 1094688,
        "cee99c589f9b37e4ea210f2bf545bf8ca3feb811a35a164f1de37f5da28ba256",
        1573833300, 0x02160800u },
    { 1096704,
        "bf3b52e46779fdf8d3db8035ae041eae2bab54454b9bdbb50c15250d8c5858f9",
        1574082086, 0x02136c00u },
    { 1098720,
        "42ce3a4064adaca490398cef6cd4024fd906ae8e281659c5e92dfbbe1ed6977e",
        1574334615, 0x020c6400u },
    { 1100736,
        "51440cb5dc65fd6d6ef8001ce274c23bad0611ca410708a847133e1234d73573",
        1574583938, 0x020e4d00u },
    { 1102752,
        "19bb19fd60635ff23f206fabe241d5632039c3bdb2637e094071e2bff860b8ed",
        1574835982, 0x0209f400u },
    { 1104768,
        "3951c2ad1c43c16b1f21d28b9c7918d9bae511ae6f5ae182ba2c57df66237472",
        1575088324, 0x020d5b00u },
    { 1106784,
        "cc8d2e1a00323684c7e590126a8f13384174a16be7ce5790e5d9c522314df528",
        1575336635, 0x020f0e00u },
    { 1108800,
        "52cf4d7d6bccce659293006a2a24386845aec1a4da8ace56332ec7204bb5db1e",
        1575589079, 0x020f9000u },
    { 1110816,
        "33948bdc4ac73cf7acd5f6deb77a35d47df45cfaed4cda5a4f77eb334030f8f7",
        1575838359, 0x020d2a00u },
    { 1112832,
        "64ac23d58d1dcc8b1a6db9af908797a446781cef1c851ab0226a79f736991670",
        1576089074, 0x02129b00u },
    { 1114848,
        "9c9fcc435d8bcd8f71c9d554b68bf52dca4efded203b5f42ea6af7c665a2730e",
        1576342606, 0x020f5b00u },
    { 1116864,
        "80b0b334ffb116dd2105974844061444afd0e93466a84512267e8afb3ac06ea2",
        1576597292, 0x020c2e00u },
    { 1118880,
        "afa49127fc0f181dee2f8668796eb3368887905764dea0483a56aba846c7969d",
        1576849225, 0x020cfb00u },
    { 1120896,
        "3f2603acea306c23ad2ac4c6c1e1ef87d00120e28d7f3bf26845b15ab7f73192",
        1577101127, 0x020e7100u },
    { 1122912,
        "5d85ad3337f898639d296c1a756c9f214129ab415ebcf600bbe2c18897ede837",
        1577350382, 0x020a0800u },
    { 1124928,
        "5352d6cd03452cfcc3721cfe2d6283cb59539f49cbfb4b9b620254ff28e5f25c",
        1577596818, 0x020e3900u },
    { 1126944,
        "6b9198e127695518a3a64b2f3b795abd29dccbfcf5dd99cdb02e9d1376e97ceb",
        1577848052, 0x0209b600u },
    { 1128960,
        "6dbedfa0dbc4221b7b1fd5587a3edca59801fc24cccf2d3edff48cb634c9ddad",
        1578102702, 0x020fdf00u },
    { 1130976,
        "11469574a454ff03bb625c2a51553d489f8dfe1bfb181ccd1051ccc7ade67a75",
        1578353024, 0x020f7200u },
    { 1132992,
        "802fcc54931d144a77009cde6aadb71395c1d5b6b748ffd41988759f0cd37b98",
        1578613036, 0x02129600u },
    { 1135008,
        "7832ad5d12c9ba9fb0a814de0d2ce115c10b408d210390a931db9c7a78d88906",
        1578867476, 0x0207dc00u },
    { 1137024,
        "336ceece85e37db753aa9e95a1eac54542db50b39a6aa192899cc251389c974f",
        1579120251, 0x0205f400u },
    { 1139040,
        "b947e383d556d2f7bb69deb6bcfb2b68c7c9a722d79a6545101ded80276d7a17",
        1579370625, 0x02097c00u },
    { 1141056,
        "51211450b2a931eb6c43b6899ef30f53a38d1ae02d11335168d7b57292f9252e",
        1579620787, 0x020a6500u },
    { 1143072,
        "dca17303c14c40604ecfd3de03e4d49ea1a30818e6f48c9e5f10e976e4a32cbd",
        1579869130, 0x020cb500u },
    { 1145088,
        "983e23bba6afa814495b8bb23c9c616dcde03b7d1707bdbeb48203f26bcf34f9",
        1580123148, 0x0208da00u },
    { 1147104,
        "62be08004a9263d92f715693cc98674c24dae882bf45d17c651a838f341f07d1",
        1580375053, 0x02082600u },
    { 1149120,
        "985433f9913feb2c40c8b5efc8dcb07aaeb84d10c96eb5d623a0f9fff898fb33",
        1580625517, 0x0209a700u },
    { 1151136,
        "b947b742a5ae90297ce20510a6ef15b218c2c12e3dad325c96c2147cd3ee42cc",
        1580876269, 0x0207a100u },
};

static const char *dns_seeds[] = {
    "dnsseed.stuffseed.org", "dnsseed.seedfunk.org"
};

#endif

@interface BRPeerManager ()

@property (nonatomic, strong) NSMutableOrderedSet *peers;
@property (nonatomic, strong) NSMutableSet *connectedPeers, *misbehavinPeers;
@property (nonatomic, strong) BRPeer *downloadPeer;
@property (nonatomic, assign) uint32_t tweak, syncStartHeight, filterUpdateHeight;
@property (nonatomic, strong) BRBloomFilter *bloomFilter;
@property (nonatomic, assign) double filterFpRate;
@property (nonatomic, assign) NSUInteger taskId, connectFailures;
@property (nonatomic, assign) NSTimeInterval earliestKeyTime, lastRelayTime;
@property (nonatomic, strong) NSMutableDictionary *blocks, *orphans, *checkpoints, *txRelays, *txRejections;
@property (nonatomic, strong) NSMutableDictionary *publishedTx, *publishedCallback;
@property (nonatomic, strong) BRMerkleBlock *lastBlock, *lastOrphan;
@property (nonatomic, strong) dispatch_queue_t q;
@property (nonatomic, strong) id resignActiveObserver, seedObserver;

@end

@implementation BRPeerManager

+ (instancetype)sharedInstance
{
    static id singleton = nil;
    static dispatch_once_t onceToken = 0;
    
    dispatch_once(&onceToken, ^{
        srand48(time(NULL)); // seed psudo random number generator (for non-cryptographic use only!)
        singleton = [self new];
    });
    
    return singleton;
}

- (instancetype)init
{
    if (! (self = [super init])) return nil;

    self.earliestKeyTime = [[BRWalletManager sharedInstance] seedCreationTime];
    self.connectedPeers = [NSMutableSet set];
    self.misbehavinPeers = [NSMutableSet set];
    self.tweak = (uint32_t)mrand48();
    self.taskId = UIBackgroundTaskInvalid;
    self.q = dispatch_queue_create("peermanager", NULL);
    self.orphans = [NSMutableDictionary dictionary];
    self.txRelays = [NSMutableDictionary dictionary];
    self.txRejections = [NSMutableDictionary dictionary];
    self.publishedTx = [NSMutableDictionary dictionary];
    self.publishedCallback = [NSMutableDictionary dictionary];

    for (BRTransaction *tx in [[[BRWalletManager sharedInstance] wallet] recentTransactions]) {
        if (tx.blockHeight != TX_UNCONFIRMED) break;
        self.publishedTx[tx.txHash] = tx; // add unconfirmed tx to mempool
    }

    self.resignActiveObserver =
        [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationWillResignActiveNotification object:nil
        queue:nil usingBlock:^(NSNotification *note) {
            [self savePeers];
            [self saveBlocks];
            [BRMerkleBlockEntity saveContext];
            if (self.syncProgress >= 1.0) [self.connectedPeers makeObjectsPerformSelector:@selector(disconnect)];
        }];

    self.seedObserver =
        [[NSNotificationCenter defaultCenter] addObserverForName:BRWalletManagerSeedChangedNotification object:nil
        queue:nil usingBlock:^(NSNotification *note) {
            self.earliestKeyTime = [[BRWalletManager sharedInstance] seedCreationTime];
            self.syncStartHeight = 0;
            [self.orphans removeAllObjects];
            [self.txRelays removeAllObjects];
            [self.txRejections removeAllObjects];
            [self.publishedTx removeAllObjects];
            [self.publishedCallback removeAllObjects];
            [BRMerkleBlockEntity deleteObjects:[BRMerkleBlockEntity allObjects]];
            [BRMerkleBlockEntity saveContext];
            _blocks = nil;
            _bloomFilter = nil;
            _lastBlock = nil;
            _lastOrphan = nil;
            [self.connectedPeers makeObjectsPerformSelector:@selector(disconnect)];
        }];

    return self;
}

- (void)dealloc
{
    [NSObject cancelPreviousPerformRequestsWithTarget:self];
    if (self.resignActiveObserver) [[NSNotificationCenter defaultCenter] removeObserver:self.resignActiveObserver];
    if (self.seedObserver) [[NSNotificationCenter defaultCenter] removeObserver:self.seedObserver];
}

- (NSMutableOrderedSet *)peers
{
    if (_peers.count >= MAX_CONNECTIONS) return _peers;

    @synchronized(self) {
        if (_peers.count >= MAX_CONNECTIONS) return _peers;
        _peers = [NSMutableOrderedSet orderedSet];

        NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];

        [[BRPeerEntity context] performBlockAndWait:^{
            for (BRPeerEntity *e in [BRPeerEntity allObjects]) {
                if (e.misbehavin == 0) [_peers addObject:[e peer]];
                else [self.misbehavinPeers addObject:[e peer]];
            }
        }];

        if (_peers.count < MAX_CONNECTIONS) {
            for (int i = 0; i < sizeof(dns_seeds)/sizeof(*dns_seeds); i++) { // DNS peer discovery
                struct hostent *h = gethostbyname(dns_seeds[i]);

                for (int j = 0; h != NULL && h->h_addr_list[j] != NULL; j++) {
                    uint32_t addr = CFSwapInt32BigToHost(((struct in_addr *)h->h_addr_list[j])->s_addr);

                    // give dns peers a timestamp between 3 and 7 days ago
                    [_peers addObject:[[BRPeer alloc] initWithAddress:addr port:BITCOIN_STANDARD_PORT
                                       timestamp:now - 24*60*60*(3 + drand48()*4) services:NODE_NETWORK]];
                }
            }

#if BITCOIN_TESTNET
            [self sortPeers];
            return _peers;
#endif
            if (_peers.count < MAX_CONNECTIONS) {
                // if DNS peer discovery fails, fall back on a hard coded list of peers
                // hard coded list is taken from the satoshi client, values need to be byte swapped to be host native
                for (NSNumber *address in [NSArray arrayWithContentsOfFile:[[NSBundle mainBundle]
                                           pathForResource:FIXED_PEERS ofType:@"plist"]]) {
                    // give hard coded peers a timestamp between 7 and 14 days ago
                    [_peers addObject:[[BRPeer alloc] initWithAddress:CFSwapInt32(address.intValue)
                                       port:BITCOIN_STANDARD_PORT timestamp:now - 24*60*60*(7 + drand48()*7)
                                       services:NODE_NETWORK]];
                }
            }
        }

        [self sortPeers];
        return _peers;
    }
}

- (NSMutableDictionary *)blocks
{
    if (_blocks.count > 0) return _blocks;

    [[BRMerkleBlockEntity context] performBlockAndWait:^{
        if (_blocks.count > 0) return;
        _blocks = [NSMutableDictionary dictionary];
        self.checkpoints = [NSMutableDictionary dictionary];

        _blocks[GENESIS_BLOCK_HASH] = GENESIS_BLOCK;
        
        // add checkpoints to the block collection
        for (int i = 0; i < sizeof(checkpoint_array)/sizeof(*checkpoint_array); i++) {
            NSData *hash = [NSString stringWithUTF8String:checkpoint_array[i].hash].hexToData.reverse;

            _blocks[hash] = [[BRMerkleBlock alloc] initWithBlockHash:hash version:1 prevBlock:nil merkleRoot:nil
                             timestamp:checkpoint_array[i].timestamp - NSTimeIntervalSince1970
                             target:checkpoint_array[i].target nonce:0 totalTransactions:0 hashes:nil flags:nil
                             height:checkpoint_array[i].height];
            //assert([_blocks[hash] isValid]);
            self.checkpoints[@(checkpoint_array[i].height)] = hash;
        }

        for (BRMerkleBlockEntity *e in [BRMerkleBlockEntity allObjects]) {
            _blocks[e.blockHash] = [e merkleBlock];
        };
    }];

    return _blocks;
}

// this is used as part of a getblocks or getheaders request
- (NSArray *)blockLocatorArray
{
    // append 10 most recent block hashes, decending, then continue appending, doubling the step back each time,
    // finishing with the genisis block (top, -1, -2, -3, -4, -5, -6, -7, -8, -9, -11, -15, -23, -39, -71, -135, ..., 0)
    NSMutableArray *locators = [NSMutableArray array];
    int32_t step = 1, start = 0;
    BRMerkleBlock *b = self.lastBlock;

    while (b && b.height > 0) {
        [locators addObject:b.blockHash];
        if (++start >= 10) step *= 2;

        for (int32_t i = 0; b && i < step; i++) {
            b = self.blocks[b.prevBlock];
        }
    }

    [locators addObject:GENESIS_BLOCK_HASH];

    return locators;
}

- (BRMerkleBlock *)lastBlock
{
    if (_lastBlock) return _lastBlock;

    NSFetchRequest *req = [BRMerkleBlockEntity fetchRequest];

    req.sortDescriptors = @[[NSSortDescriptor sortDescriptorWithKey:@"height" ascending:NO]];
    req.predicate = [NSPredicate predicateWithFormat:@"height >= 0 && height != %d", BLOCK_UNKOWN_HEIGHT];
    req.fetchLimit = 1;
    _lastBlock = [[BRMerkleBlockEntity fetchObjects:req].lastObject merkleBlock];

    // if we don't have any blocks yet, use the latest checkpoint that is at least a week older than earliestKeyTime
    for (int i = sizeof(checkpoint_array)/sizeof(*checkpoint_array) - 1; ! _lastBlock && i >= 0; i--) {
        if (checkpoint_array[i].timestamp + 7*24*60*60 - NSTimeIntervalSince1970 >= self.earliestKeyTime) continue;
        _lastBlock = [[BRMerkleBlock alloc]
                      initWithBlockHash:[NSString stringWithUTF8String:checkpoint_array[i].hash].hexToData.reverse
                      version:1 prevBlock:nil merkleRoot:nil
                      timestamp:checkpoint_array[i].timestamp - NSTimeIntervalSince1970
                      target:checkpoint_array[i].target nonce:0 totalTransactions:0 hashes:nil flags:nil
                      height:checkpoint_array[i].height];
    }

    if (! _lastBlock) _lastBlock = GENESIS_BLOCK;

    return _lastBlock;
}

- (uint32_t)lastBlockHeight
{
    return self.lastBlock.height;
}

- (uint32_t)estimatedBlockHeight
{
    return (self.downloadPeer.lastblock > self.lastBlockHeight) ? self.downloadPeer.lastblock : self.lastBlockHeight;
}

- (double)syncProgress
{
    if (! self.downloadPeer) return (self.syncStartHeight == self.lastBlockHeight) ? 0.05 : 0.0;
    if (self.lastBlockHeight >= self.downloadPeer.lastblock) return 1.0;
    return 0.1 + 0.9*(self.lastBlockHeight - self.syncStartHeight)/(self.downloadPeer.lastblock - self.syncStartHeight);
}

// number of connected peers
- (NSUInteger)peerCount
{
    NSUInteger count = 0;

    for (BRPeer *peer in self.connectedPeers) {
        if (peer.status == BRPeerStatusConnected) count++;
    }

    return count;
}

- (BRBloomFilter *)bloomFilter
{
    if (_bloomFilter) return _bloomFilter;

    self.filterUpdateHeight = self.lastBlockHeight;
    self.filterFpRate = BLOOM_DEFAULT_FALSEPOSITIVE_RATE;

    if (self.lastBlockHeight + BLOCK_DIFFICULTY_INTERVAL < self.downloadPeer.lastblock) {
        self.filterFpRate = BLOOM_REDUCED_FALSEPOSITIVE_RATE; // lower false positive rate during chain sync
    }
    else if (self.lastBlockHeight < self.downloadPeer.lastblock) { // partially lower fp rate if we're nearly synced
        self.filterFpRate -= (BLOOM_DEFAULT_FALSEPOSITIVE_RATE - BLOOM_REDUCED_FALSEPOSITIVE_RATE)*
                             (self.downloadPeer.lastblock - self.lastBlockHeight)/BLOCK_DIFFICULTY_INTERVAL;
    }

    BRWallet *w = [[BRWalletManager sharedInstance] wallet];
    NSUInteger elemCount = w.addresses.count + w.unspentOutputs.count;
    BRBloomFilter *filter = [[BRBloomFilter alloc] initWithFalsePositiveRate:self.filterFpRate
                             forElementCount:(elemCount < 200) ? elemCount*1.5 : elemCount + 100
                             tweak:self.tweak flags:BLOOM_UPDATE_ALL];

    for (NSString *address in w.addresses) { // add addresses to watch for any tx receiveing money to the wallet
        NSData *hash = address.addressToHash160;

        if (hash && ! [filter containsData:hash]) [filter insertData:hash];
    }

    for (NSData *utxo in w.unspentOutputs) { // add unspent outputs to watch for any tx sending money from the wallet
        if (! [filter containsData:utxo]) [filter insertData:utxo];
    }

    _bloomFilter = filter;
    return _bloomFilter;
}

- (void)connect
{
    if (! [[BRWalletManager sharedInstance] wallet]) return; // check to make sure the wallet has been created
    if (self.connectFailures >= MAX_CONNECT_FAILURES) self.connectFailures = 0; // this attempt is a manual retry
    
    if (self.syncProgress < 1.0) {
        if (self.syncStartHeight == 0) self.syncStartHeight = self.lastBlockHeight;

        dispatch_async(dispatch_get_main_queue(), ^{
            [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerSyncStartedNotification object:nil];
        });
    }

    dispatch_async(self.q, ^{
        [self.connectedPeers minusSet:[self.connectedPeers objectsPassingTest:^BOOL(id obj, BOOL *stop) {
            return ([obj status] == BRPeerStatusDisconnected) ? YES : NO;
        }]];

        if (self.connectedPeers.count >= MAX_CONNECTIONS) return; // we're already connected to MAX_CONNECTIONS peers

        NSMutableOrderedSet *peers = [NSMutableOrderedSet orderedSetWithOrderedSet:self.peers];

        if (peers.count > 100) [peers removeObjectsInRange:NSMakeRange(100, peers.count - 100)];

        while (peers.count > 0 && self.connectedPeers.count < MAX_CONNECTIONS) {
            // pick a random peer biased towards peers with more recent timestamps
            BRPeer *p = peers[(NSUInteger)(pow(lrand48() % peers.count, 2)/peers.count)];

            if (p && ! [self.connectedPeers containsObject:p]) {
                [p setDelegate:self queue:self.q];
                p.earliestKeyTime = self.earliestKeyTime;
                [self.connectedPeers addObject:p];
                [p connect];
            }

            [peers removeObject:p];
        }

        if (self.connectedPeers.count == 0) {
            [self syncStopped];
            self.syncStartHeight = 0;

            dispatch_async(dispatch_get_main_queue(), ^{
                NSError *error = [NSError errorWithDomain:@"BreadWallet" code:1 userInfo:@{NSLocalizedDescriptionKey:
                                  NSLocalizedString(@"no peers found", nil)}];

                [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerSyncFailedNotification
                 object:nil userInfo:@{@"error":error}];
            });
        }
    });
}

// rescans blocks and transactions after earliestKeyTime, a new random download peer is also selected due to the
// possibility that a malicious node might lie by omitting transactions that match the bloom filter
- (void)rescan
{
    if (! self.connected) return;

    _lastBlock = nil;

    // start the chain download from the most recent checkpoint that's at least a week older than earliestKeyTime
    for (int i = sizeof(checkpoint_array)/sizeof(*checkpoint_array) - 1; ! _lastBlock && i >= 0; i--) {
        if (checkpoint_array[i].timestamp + 7*24*60*60 - NSTimeIntervalSince1970 >= self.earliestKeyTime) continue;
        self.lastBlock = self.blocks[[NSString stringWithUTF8String:checkpoint_array[i].hash].hexToData.reverse];
    }

    if (! _lastBlock) _lastBlock = self.blocks[GENESIS_BLOCK_HASH];

    if (self.downloadPeer) { // disconnect the current download peer so a new random one will be selected
        [self.peers removeObject:self.downloadPeer];
        [self.downloadPeer disconnect];
    }

    self.syncStartHeight = self.lastBlockHeight;
    [self connect];
}

- (void)publishTransaction:(BRTransaction *)transaction completion:(void (^)(NSError *error))completion
{
    if (! [transaction isSigned]) {
        if (completion) {
            completion([NSError errorWithDomain:@"BreadWallet" code:401 userInfo:@{NSLocalizedDescriptionKey:
                        NSLocalizedString(@"woodcoin transaction not signed", nil)}]);
        }
        return;
    }

    if (! self.connected) {
        if (completion) {
            completion([NSError errorWithDomain:@"BreadWallet" code:-1009 userInfo:@{NSLocalizedDescriptionKey:
                        NSLocalizedString(@"not connected to the woodcoin network", nil)}]);
        }
        return;
    }

    self.publishedTx[transaction.txHash] = transaction;
    if (completion) self.publishedCallback[transaction.txHash] = completion;

    NSMutableSet *peers = [NSMutableSet setWithSet:self.connectedPeers];

    // instead of publishing to all peers, leave out the download peer to see if the tx propogates and gets relayed back
    // TODO: XXXX connect to a random peer with an empty or fake bloom filter just for publishing
    if (self.peerCount > 1) [peers removeObject:self.downloadPeer];

    dispatch_async(dispatch_get_main_queue(), ^{
        [self performSelector:@selector(txTimeout:) withObject:transaction.txHash afterDelay:PROTOCOL_TIMEOUT];

        for (BRPeer *p in peers) {
            [p sendInvMessageWithTxHash:transaction.txHash];
        }
    });
}

// number of connected peers that have relayed the transaction
- (NSUInteger)relayCountForTransaction:(NSData *)txHash
{
    return [self.txRelays[txHash] count];
}

// seconds since reference date, 00:00:00 01/01/01 GMT
// NOTE: this is only accurate for the last two weeks worth of blocks, other timestamps are estimated from checkpoints
// BUG: this just doesn't work very well... we need to start storing tx metadata
- (NSTimeInterval)timestampForBlockHeight:(uint32_t)blockHeight
{
    if (blockHeight == TX_UNCONFIRMED) return [NSDate timeIntervalSinceReferenceDate] + 35; // average confirm time

    if (blockHeight > self.lastBlockHeight) { // future block, assume 10 minutes per block after last block
        return self.lastBlock.timestamp + (blockHeight - self.lastBlockHeight)*2*60;
    }

    if (_blocks.count > 0) {
        if (blockHeight >= self.lastBlockHeight - BLOCK_DIFFICULTY_INTERVAL*2) { // recent block we have the header for
            BRMerkleBlock *block = self.lastBlock;

            while (block && block.height > blockHeight) {
                block = self.blocks[block.prevBlock];
            }

            if (block) return block.timestamp;
        }
    }
    else [[BRMerkleBlockEntity context] performBlock:^{ [self blocks]; }];

    uint32_t h = self.lastBlockHeight;
    NSTimeInterval t = self.lastBlock.timestamp + NSTimeIntervalSince1970;

    for (int i = sizeof(checkpoint_array)/sizeof(*checkpoint_array) - 1; i >= 0; i--) { // estimate from checkpoints
        if (checkpoint_array[i].height <= blockHeight) {
            t = checkpoint_array[i].timestamp + (t - checkpoint_array[i].timestamp)*
                (blockHeight - checkpoint_array[i].height)/(h - checkpoint_array[i].height);
            return t - NSTimeIntervalSince1970;
        }

        h = checkpoint_array[i].height;
        t = checkpoint_array[i].timestamp;
    }

    return GENESIS_BLOCK.timestamp + ((t - NSTimeIntervalSince1970) - GENESIS_BLOCK.timestamp)*blockHeight/h;
}

- (void)setBlockHeight:(int32_t)height forTxHashes:(NSArray *)txHashes
{
    [[[BRWalletManager sharedInstance] wallet] setBlockHeight:height forTxHashes:txHashes];
    
    if (height != TX_UNCONFIRMED) { // remove confirmed tx from publish list and relay counts
        [self.publishedTx removeObjectsForKeys:txHashes];
        [self.publishedCallback removeObjectsForKeys:txHashes];
        [self.txRejections removeObjectsForKeys:txHashes];
        [self.txRelays removeObjectsForKeys:txHashes];
    }
}

- (void)txTimeout:(NSData *)txHash
{
    void (^callback)(NSError *error) = self.publishedCallback[txHash];

    [self.publishedTx removeObjectForKey:txHash];
    [self.publishedCallback removeObjectForKey:txHash];
    [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(txTimeout:) object:txHash];

    if (callback) {
        callback([NSError errorWithDomain:@"BreadWallet" code:BITCOIN_TIMEOUT_CODE userInfo:@{NSLocalizedDescriptionKey:
                  NSLocalizedString(@"transaction canceled, network timeout", nil)}]);
    }
}

- (void)syncTimeout
{
    //BUG: XXXX sync can stall if download peer continues to relay tx but not blocks
    NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];

    if (now - self.lastRelayTime < PROTOCOL_TIMEOUT) { // the download peer relayed something in time, so restart timer
        [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(syncTimeout) object:nil];
        [self performSelector:@selector(syncTimeout) withObject:nil
         afterDelay:PROTOCOL_TIMEOUT - (now - self.lastRelayTime)];
        return;
    }

    NSLog(@"%@:%d chain sync timed out", self.downloadPeer.host, self.downloadPeer.port);

    [self.peers removeObject:self.downloadPeer];
    [self.downloadPeer disconnect];
}

- (void)syncStopped
{
    dispatch_async(dispatch_get_main_queue(), ^{
        if ([[UIApplication sharedApplication] applicationState] == UIApplicationStateBackground) {
            [self.connectedPeers makeObjectsPerformSelector:@selector(disconnect)];
            [self.connectedPeers removeAllObjects];
        }
    });

    if (self.taskId != UIBackgroundTaskInvalid) {
        [[UIApplication sharedApplication] endBackgroundTask:self.taskId];
        self.taskId = UIBackgroundTaskInvalid;
        
        for (BRPeer *p in self.connectedPeers) { // after syncing, load filters and get mempools from the other peers
            if (p != self.downloadPeer) [p sendFilterloadMessage:self.bloomFilter.data];
            [p sendMempoolMessage];
            
            //BUG: XXXX sometimes a peer relays thousands of transactions after mempool msg, should detect and
            // disconnect if it's more than BLOOM_DEFAULT_FALSEPOSITIVE_RATE*10*<typical mempool size>*2
        }
    }

    dispatch_async(dispatch_get_main_queue(), ^{
        [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(syncTimeout) object:nil];
    });
}

// unconfirmed transactions that aren't in the mempools of any of connected peers have likely dropped off the network
- (void)removeUnrelayedTransactions
{
    BRWalletManager *m = [BRWalletManager sharedInstance];

    for (BRTransaction *tx in m.wallet.recentTransactions) {
        if (tx.blockHeight != TX_UNCONFIRMED) break;
        if ([self.txRelays[tx.txHash] count] == 0) [m.wallet removeTransaction:tx.txHash];
    }
}

- (void)peerMisbehavin:(BRPeer *)peer
{
    peer.misbehavin++;
    [self.peers removeObject:peer];
    [self.misbehavinPeers addObject:peer];
    [peer disconnect];
    [self connect];
}

- (void)sortPeers
{
    [_peers sortUsingComparator:^NSComparisonResult(BRPeer *obj1, BRPeer *obj2) {
        if (obj1.timestamp > obj2.timestamp) return NSOrderedAscending;
        if (obj1.timestamp < obj2.timestamp) return NSOrderedDescending;
        return NSOrderedSame;
    }];
}

- (void)savePeers
{
    NSMutableSet *peers = [[self.peers.set setByAddingObjectsFromSet:self.misbehavinPeers] mutableCopy];
    NSMutableSet *addrs = [NSMutableSet set];

    for (BRPeer *p in peers) {
        [addrs addObject:@((int32_t)p.address)];
    }

    [[BRPeerEntity context] performBlock:^{
        [BRPeerEntity deleteObjects:[BRPeerEntity objectsMatching:@"! (address in %@)", addrs]]; // remove deleted peers

        for (BRPeerEntity *e in [BRPeerEntity objectsMatching:@"address in %@", addrs]) { // update existing peers
            BRPeer *p = [peers member:[e peer]];

            if (p) {
                e.timestamp = p.timestamp;
                e.services = p.services;
                e.misbehavin = p.misbehavin;
                [peers removeObject:p];
            }
            else [e deleteObject];
        }

        for (BRPeer *p in peers) { // add new peers
            [[BRPeerEntity managedObject] setAttributesFromPeer:p];
        }
    }];
}

- (void)saveBlocks
{
    NSMutableSet *blockHashes = [NSMutableSet set];
    BRMerkleBlock *b = self.lastBlock;

    while (b) {
        [blockHashes addObject:b.blockHash];
        b = self.blocks[b.prevBlock];
    }

    [[BRMerkleBlockEntity context] performBlock:^{
        [BRMerkleBlockEntity deleteObjects:[BRMerkleBlockEntity objectsMatching:@"! (blockHash in %@)", blockHashes]];

        for (BRMerkleBlockEntity *e in [BRMerkleBlockEntity objectsMatching:@"blockHash in %@", blockHashes]) {
            [e setAttributesFromBlock:self.blocks[e.blockHash]];
            [blockHashes removeObject:e.blockHash];
        }

        for (NSData *hash in blockHashes) {
            [[BRMerkleBlockEntity managedObject] setAttributesFromBlock:self.blocks[hash]];
        }
    }];
}

#pragma mark - BRPeerDelegate

- (void)peerConnected:(BRPeer *)peer
{
    NSLog(@"%@:%d connected with lastblock %d", peer.host, peer.port, peer.lastblock);

    self.connectFailures = 0;
    peer.timestamp = [NSDate timeIntervalSinceReferenceDate]; // set last seen timestamp for peer

    if (peer.lastblock + 10 < self.lastBlock.height) { // drop peers that aren't synced yet, we can't help them
        [peer disconnect];
        return;
    }

    if (self.connected && (self.downloadPeer.lastblock >= peer.lastblock || self.lastBlock.height >= peer.lastblock)) {
        if (self.lastBlock.height < self.downloadPeer.lastblock) return; // don't load bloom filter yet if we're syncing
        [peer sendFilterloadMessage:self.bloomFilter.data];
        [peer sendMempoolMessage];
        return; // we're already connected to a download peer
    }

    // select the peer with the lowest ping time to download the chain from if we're behind
    // BUG: XXXX a malicious peer can report a higher lastblock to make us select them as the download peer, if two
    // peers agree on lastblock, use one of them instead
    for (BRPeer *p in self.connectedPeers) {
        if ((p.pingTime < peer.pingTime && p.lastblock >= peer.lastblock) || p.lastblock > peer.lastblock) peer = p;
    }

    [self.downloadPeer disconnect];
    self.downloadPeer = peer;
    _connected = YES;

    // every time a new wallet address is added, the bloom filter has to be rebuilt, and each address is only used for
    // one transaction, so here we generate some spare addresses to avoid rebuilding the filter each time a wallet
    // transaction is encountered during the blockchain download (generates twice the external gap limit for both
    // address chains)
    [[[BRWalletManager sharedInstance] wallet] addressesWithGapLimit:SEQUENCE_GAP_LIMIT_EXTERNAL*2 internal:NO];
    [[[BRWalletManager sharedInstance] wallet] addressesWithGapLimit:SEQUENCE_GAP_LIMIT_EXTERNAL*2 internal:YES];

    _bloomFilter = nil; // make sure the bloom filter is updated with any newly generated addresses
    [peer sendFilterloadMessage:self.bloomFilter.data];

    if (self.taskId == UIBackgroundTaskInvalid) { // start a background task for the chain sync
        self.taskId = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{}];
    }
    
    if (self.lastBlock.height < peer.lastblock) { // start blockchain sync
        self.lastRelayTime = 0;

        dispatch_async(dispatch_get_main_queue(), ^{ // setup a timer to detect if the sync stalls
            [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(syncTimeout) object:nil];
            [self performSelector:@selector(syncTimeout) withObject:nil afterDelay:PROTOCOL_TIMEOUT];

            dispatch_async(self.q, ^{
                // request just block headers up to a week before earliestKeyTime, and then merkleblocks after that
                if (self.lastBlock.timestamp + 7*24*60*60 >= self.earliestKeyTime) {
                    [peer sendGetblocksMessageWithLocators:[self blockLocatorArray] andHashStop:nil];
                }
                else [peer sendGetheadersMessageWithLocators:[self blockLocatorArray] andHashStop:nil];
            });
        });
    }
    else { // we're already synced
        [self syncStopped];
        [peer sendGetaddrMessage]; // request a list of other woodcoin peers
        self.syncStartHeight = 0;

        dispatch_async(dispatch_get_main_queue(), ^{
            [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerSyncFinishedNotification
             object:nil];
        });
    }
}

- (void)peer:(BRPeer *)peer disconnectedWithError:(NSError *)error
{
    NSLog(@"%@:%d disconnected%@%@", peer.host, peer.port, error ? @", " : @"", error ? error : @"");
    
    if ([error.domain isEqual:@"BreadWallet"] && error.code != BITCOIN_TIMEOUT_CODE) {
        [self peerMisbehavin:peer]; // if it's protocol error other than timeout, the peer isn't following the rules
    }
    else if (error) { // timeout or some non-protocol related network error
        [self.peers removeObject:peer];
        self.connectFailures++;
    }

    for (NSData *txHash in self.txRelays.allKeys) {
        [self.txRelays[txHash] removeObject:peer];
        [self.txRejections[txHash] removeObject:peer];
    }

    if ([self.downloadPeer isEqual:peer]) { // download peer disconnected
        _connected = NO;
        self.downloadPeer = nil;
        [self syncStopped];
        if (self.connectFailures > MAX_CONNECT_FAILURES) self.connectFailures = MAX_CONNECT_FAILURES;
    }

    dispatch_async(dispatch_get_main_queue(), ^{
        if (! self.connected && self.connectFailures == MAX_CONNECT_FAILURES) {
            self.syncStartHeight = 0;
        
            // clear out stored peers so we get a fresh list from DNS on next connect attempt
            [self.connectedPeers removeAllObjects];
            [self.misbehavinPeers removeAllObjects];
            [BRPeerEntity deleteObjects:[BRPeerEntity allObjects]];
            _peers = nil;

            [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerSyncFailedNotification
             object:nil userInfo:error ? @{@"error":error} : nil];
        }
        else if (self.connectFailures < MAX_CONNECT_FAILURES) [self connect]; // try connecting to another peer
        
        [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerTxStatusNotification object:nil];
    });
}

- (void)peer:(BRPeer *)peer relayedPeers:(NSArray *)peers
{
    NSLog(@"%@:%d relayed %d peer(s)", peer.host, peer.port, (int)peers.count);
    if (peer == self.downloadPeer) self.lastRelayTime = [NSDate timeIntervalSinceReferenceDate];
    [self.peers addObjectsFromArray:peers];
    [self.peers minusSet:self.misbehavinPeers];
    [self sortPeers];

    // limit total to 2500 peers
    if (self.peers.count > 2500) [self.peers removeObjectsInRange:NSMakeRange(2500, self.peers.count - 2500)];

    NSTimeInterval t = [NSDate timeIntervalSinceReferenceDate];

    // remove peers more than 3 hours old, or until there are only 1000 left
    while (self.peers.count > 1000 && ((BRPeer *)self.peers.lastObject).timestamp + 3*60*60 < t) {
        [self.peers removeObject:self.peers.lastObject];
    }

    if (peers.count > 1 && peers.count < 1000) { // peer relaying is complete when we receive fewer than 1000
        // this is a good time to remove unconfirmed tx that dropped off the network
        if (self.peerCount == MAX_CONNECTIONS && self.lastBlockHeight >= self.downloadPeer.lastblock) {
            [self removeUnrelayedTransactions];
        }

        [self savePeers];
        [BRPeerEntity saveContext];
    }
}

- (void)peer:(BRPeer *)peer relayedTransaction:(BRTransaction *)transaction
{
    BRWallet *w = [[BRWalletManager sharedInstance] wallet];

    NSLog(@"%@:%d relayed transaction %@", peer.host, peer.port, transaction.txHash);
    if (peer == self.downloadPeer) self.lastRelayTime = [NSDate timeIntervalSinceReferenceDate];

    if ([w registerTransaction:transaction]) {
        self.publishedTx[transaction.txHash] = transaction;

        // keep track of how many peers relay a tx, this indicates how likely it is to be confirmed in future blocks
        if (! self.txRelays[transaction.txHash]) self.txRelays[transaction.txHash] = [NSMutableSet set];

        if (! [self.txRelays[transaction.txHash] containsObject:peer]) {
            [self.txRelays[transaction.txHash] addObject:peer];
        
            dispatch_async(dispatch_get_main_queue(), ^{
                [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerTxStatusNotification
                 object:nil];
            });
        }

        // the transaction likely consumed one or more wallet addresses, so check that at least the next <gap limit>
        // unused addresses are still matched by the bloom filter
        NSArray *external = [w addressesWithGapLimit:SEQUENCE_GAP_LIMIT_EXTERNAL internal:NO],
                *internal = [w addressesWithGapLimit:SEQUENCE_GAP_LIMIT_INTERNAL internal:YES];

        for (NSString *address in [external arrayByAddingObjectsFromArray:internal]) {
            NSData *hash = address.addressToHash160;

            if (! hash || [self.bloomFilter containsData:hash]) continue;

            // generate additional addresses so we don't have to update the filter after each new transaction
            [w addressesWithGapLimit:SEQUENCE_GAP_LIMIT_EXTERNAL*2 internal:NO];
            [w addressesWithGapLimit:SEQUENCE_GAP_LIMIT_EXTERNAL*2 internal:YES];

            _bloomFilter = nil; // reset the filter so a new one will be created with the new wallet addresses

            if (self.lastBlockHeight >= self.downloadPeer.lastblock) { // if we're syncing, only update download peer
                for (BRPeer *p in self.connectedPeers) {
                    [p sendFilterloadMessage:self.bloomFilter.data];
                }
            }
            else [self.downloadPeer sendFilterloadMessage:self.bloomFilter.data];

            // after adding addresses to the filter, re-request upcoming blocks that were requested using the old filter
            [self.downloadPeer rereqeustBlocksFrom:self.lastBlock.blockHash];
            break;
        }
    }
}

- (void)peer:(BRPeer *)peer rejectedTransaction:(NSData *)txHash withCode:(uint8_t)code
{
    if ([self.txRelays[txHash] containsObject:peer]) {
        [self.txRelays[txHash] removeObject:peer];

        dispatch_async(dispatch_get_main_queue(), ^{
            [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerTxStatusNotification object:nil];
        });
    }

    // keep track of possible double spend rejections and notify the user to do a rescan
    // NOTE: lots of checks here to make sure a malicious node can't annoy the user with rescan alerts
    if (code == 0x10 && self.publishedTx[txHash] != nil && ! [self.txRejections[txHash] containsObject:peer] &&
        [self.connectedPeers containsObject:peer]) {
        if (! self.txRejections[txHash]) self.txRejections[txHash] = [NSMutableSet set];
        [self.txRejections[txHash] addObject:peer];

        if ([self.txRejections[txHash] count] > 1 || self.peerCount < 3) {
            /*[[[UIAlertView alloc] initWithTitle:NSLocalizedString(@"transaction rejected", nil)
              message:NSLocalizedString(@"Your wallet may be out of sync.\n"
                                        "This can often be fixed by rescaning the blockchain.", nil) delegate:self
              cancelButtonTitle:NSLocalizedString(@"cancel", nil)
              otherButtonTitles:NSLocalizedString(@"rescan", nil), nil] show];*/
            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"transaction rejected" message:@"Your wallet may be out of sync.\n"
                                        "This can often be fixed by rescaning the blockchain." preferredStyle:UIAlertControllerStyleAlert];
            UIAlertAction* cancelAction = [UIAlertAction actionWithTitle:@"cancel" style:UIAlertActionStyleCancel handler:nil];
            
            UIAlertAction* rescanAction = [UIAlertAction actionWithTitle:@"rescan" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {
                [self rescan];
            }];
            [alert addAction:cancelAction];
            [alert addAction:rescanAction];
            UIViewController *viewController = [[[[UIApplication sharedApplication] delegate] window] rootViewController];
            NSLayoutConstraint *constraint = [NSLayoutConstraint constraintWithItem:alert.view attribute:NSLayoutAttributeHeight relatedBy:NSLayoutRelationLessThanOrEqual toItem:nil attribute:NSLayoutAttributeNotAnAttribute multiplier:1 constant:viewController.view.frame.size.height*2.0f];
            [alert.view addConstraint:constraint];
            [viewController presentViewController:alert animated:YES completion:^{}];
        }
    }
}

- (void)peer:(BRPeer *)peer relayedBlock:(BRMerkleBlock *)block
{
    if (peer == self.downloadPeer) self.lastRelayTime = [NSDate timeIntervalSinceReferenceDate];

    // ignore block headers that are newer than one week before earliestKeyTime (headers have 0 totalTransactions)
    if (block.totalTransactions == 0 && block.timestamp + 7*24*60*60 > self.earliestKeyTime) return;

    // track the observed bloom filter false positive rate using a low pass filter to smooth out variance
    if (peer == self.downloadPeer && block.totalTransactions > 0) {
        // 1% low pass filter, also weights each block by total transactions, using 400 tx per block as typical
        self.filterFpRate = self.filterFpRate*(1.0 - 0.01*block.totalTransactions/400) + 0.01*block.txHashes.count/400;

        if (self.filterFpRate > BLOOM_DEFAULT_FALSEPOSITIVE_RATE*10.0) { // false positive rate sanity check
            NSLog(@"%@:%d bloom filter false positive rate too high after %d blocks, disconnecting...", peer.host,
                  peer.port, self.lastBlockHeight - self.filterUpdateHeight);
            [self.downloadPeer disconnect];
        }
    }

    BRMerkleBlock *prev = self.blocks[block.prevBlock];
    NSTimeInterval transitionTime = 0;

    if (! prev) { // block is an orphan
        NSLog(@"%@:%d relayed orphan block %@, previous %@, last block is %@, height %d", peer.host, peer.port,
              block.blockHash, block.prevBlock, self.lastBlock.blockHash, self.lastBlock.height);

        // ignore orphans older than one week ago
        if (block.timestamp < [NSDate timeIntervalSinceReferenceDate] - 7*24*60*60) return;

        // call getblocks, unless we already did with the previous block, or we're still downloading the chain
        if (self.lastBlock.height >= peer.lastblock && ! [self.lastOrphan.blockHash isEqual:block.prevBlock]) {
            NSLog(@"%@:%d calling getblocks", peer.host, peer.port);
            [peer sendGetblocksMessageWithLocators:[self blockLocatorArray] andHashStop:nil];
        }

        self.orphans[block.prevBlock] = block; // orphans are indexed by previous block rather than their own hash
        self.lastOrphan = block;
        return;
    }

    block.height = prev.height + 1;

    if ((block.height % BLOCK_DIFFICULTY_INTERVAL) == 0) { // hit a difficulty transition, find previous transition time
        BRMerkleBlock *b = block;

        for (uint32_t i = 0; b && i < BLOCK_DIFFICULTY_INTERVAL; i++) {
            b = self.blocks[b.prevBlock];
        }

        transitionTime = b.timestamp;

        while (b) { // free up some memory
            b = self.blocks[b.prevBlock];
            if (b) [self.blocks removeObjectForKey:b.blockHash];
        }
    }

    // verify block difficulty
    /*if (! [block verifyDifficultyFromPreviousBlock:prev andTransitionTime:transitionTime]) {
        NSLog(@"%@:%d relayed block with invalid difficulty target %x, blockHash: %@", peer.host, peer.port,
              block.target, block.blockHash);
        [self peerMisbehavin:peer];
        return;
    }*/

    // verify block chain checkpoints
    if (self.checkpoints[@(block.height)] && ! [block.blockHash isEqual:self.checkpoints[@(block.height)]]) {
        NSLog(@"%@:%d relayed a block that differs from the checkpoint at height %d, blockHash: %@, expected: %@",
              peer.host, peer.port, block.height, block.blockHash, self.checkpoints[@(block.height)]);
        [self peerMisbehavin:peer];
        return;
    }

    if ([block.prevBlock isEqual:self.lastBlock.blockHash]) { // new block extends main chain
        if ((block.height % 500) == 0 || block.txHashes.count > 0 || block.height > peer.lastblock) {
            NSLog(@"adding block at height: %d, false positive rate: %f", block.height, self.filterFpRate);
        }

        self.blocks[block.blockHash] = block;
        self.lastBlock = block;
        [self setBlockHeight:block.height forTxHashes:block.txHashes];
    }
    else if (self.blocks[block.blockHash] != nil) { // we already have the block (or at least the header)
        if ((block.height % 500) == 0 || block.txHashes.count > 0 || block.height > peer.lastblock) {
            NSLog(@"%@:%d relayed existing block at height %d", peer.host, peer.port, block.height);
        }

        self.blocks[block.blockHash] = block;

        BRMerkleBlock *b = self.lastBlock;

        while (b && b.height > block.height) { // check if block is in main chain
            b = self.blocks[b.prevBlock];
        }

        if ([b.blockHash isEqual:block.blockHash]) { // if it's not on a fork, set block heights for its transactions
            [self setBlockHeight:block.height forTxHashes:block.txHashes];
            if (block.height == self.lastBlock.height) self.lastBlock = block;
        }
    }
    else { // new block is on a fork
        if (block.height <= BITCOIN_REFERENCE_BLOCK_HEIGHT) { // fork is older than the most recent checkpoint
            NSLog(@"ignoring block on fork older than most recent checkpoint, fork height: %d, blockHash: %@",
                  block.height, block.blockHash);
            return;
        }

        // special case, if a new block is mined while we're rescaning the chain, mark as orphan til we're caught up
        if (self.lastBlock.height < peer.lastblock && block.height > self.lastBlock.height + 1) {
            NSLog(@"marking new block at height %d as orphan until rescan completes", block.height);
            self.orphans[block.prevBlock] = block;
            self.lastOrphan = block;
            return;
        }

        NSLog(@"chain fork to height %d", block.height);
        self.blocks[block.blockHash] = block;
        if (block.height <= self.lastBlock.height) return; // if fork is shorter than main chain, ingore it for now

        NSMutableArray *txHashes = [NSMutableArray array];
        BRMerkleBlock *b = block, *b2 = self.lastBlock;

        while (b && b2 && ! [b.blockHash isEqual:b2.blockHash]) { // walk back to where the fork joins the main chain
            b = self.blocks[b.prevBlock];
            if (b.height < b2.height) b2 = self.blocks[b2.prevBlock];
        }

        NSLog(@"reorganizing chain from height %d, new height is %d", b.height, block.height);

        // mark transactions after the join point as unconfirmed
        for (BRTransaction *tx in [[[BRWalletManager sharedInstance] wallet] recentTransactions]) {
            if (tx.blockHeight <= b.height) break;
            [txHashes addObject:tx.txHash];
        }

        [self setBlockHeight:TX_UNCONFIRMED forTxHashes:txHashes];
        b = block;

        while (b.height > b2.height) { // set transaction heights for new main chain
            [self setBlockHeight:b.height forTxHashes:b.txHashes];
            b = self.blocks[b.prevBlock];
        }

        self.lastBlock = block;
    }

    if (block.height == peer.lastblock && block == self.lastBlock) { // chain download is complete
        [self saveBlocks];
        [BRMerkleBlockEntity saveContext];
        [self syncStopped];
        [peer sendGetaddrMessage]; // request a list of other woodcoin peers
        self.syncStartHeight = 0;

        dispatch_async(dispatch_get_main_queue(), ^{
            [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerSyncFinishedNotification
             object:nil];
        });
    }

    if (block == self.lastBlock && self.orphans[block.blockHash]) { // check if the next block was received as an orphan
        BRMerkleBlock *b = self.orphans[block.blockHash];

        [self.orphans removeObjectForKey:block.blockHash];
        [self peer:peer relayedBlock:b];
    }

    if (block.height > peer.lastblock) { // notify that transaction confirmations may have changed
        dispatch_async(dispatch_get_main_queue(), ^{
            [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerTxStatusNotification object:nil];
        });
    }
}

- (BRTransaction *)peer:(BRPeer *)peer requestedTransaction:(NSData *)txHash
{
    BRTransaction *tx = self.publishedTx[txHash];
    void (^callback)(NSError *error) = self.publishedCallback[txHash];
    
    if (tx) {
        [[[BRWalletManager sharedInstance] wallet] registerTransaction:tx];

        if (! self.txRelays[txHash]) self.txRelays[txHash] = [NSMutableSet set];
        [self.txRelays[txHash] addObject:peer];

        dispatch_async(dispatch_get_main_queue(), ^{
            [[NSNotificationCenter defaultCenter] postNotificationName:BRPeerManagerTxStatusNotification object:nil];
        });

        [self.publishedCallback removeObjectForKey:txHash];

        dispatch_async(dispatch_get_main_queue(), ^{
            [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(txTimeout:) object:txHash];
            if (callback) callback(nil);
        });
    }

    return tx;
}

- (NSData *)peerBloomFilter:(BRPeer *)peer
{
    self.filterFpRate = self.bloomFilter.falsePositiveRate;
    self.filterUpdateHeight = self.lastBlockHeight;
    return self.bloomFilter.data;
}

#pragma mark - UIAlertViewDelegate

/*- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == alertView.cancelButtonIndex) return;
    [self rescan];
}*/

@end
